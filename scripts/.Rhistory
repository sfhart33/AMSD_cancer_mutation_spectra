filter(p_value < 0.05, abs(mean1 - mean2) > 0.01),
aes(label = signature),
max.overlaps = 20
)
labs(
title = paste0(
tumor, ": ", anc1, " vs ", anc2, " (", measure, ")"
),
x = paste0("Mean in ", anc1),
y = paste0("Mean in ", anc2)
) +
theme_minimal()
}
plot_sig_means("afr", "eas", "LUAD", measure = "fraction")
ggplot(subset_tcga, aes(x = mean1, y = mean2, label = signature)) +
geom_point(color = ifelse(measure == "fraction", "darkorange", "steelblue")) +
# Error bars for ancestry1 (x-axis)
geom_errorbarh(aes(xmin = mean1 - sd1/sqrt(n1), xmax = mean1 + sd1/sqrt(n1)),
height = 0, alpha = 0.5) +
# Error bars for ancestry2 (y-axis)
geom_errorbar(aes(ymin = mean2 - sd2/sqrt(n2), ymax = mean2 + sd2/sqrt(n2)),
width = 0, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray40") +
ggrepel::geom_label_repel(
data = subset_tcga %>%
filter(p_value < 0.05, abs(mean1 - mean2) > 0.01),
aes(label = signature),
max.overlaps = 20
) +
labs(
title = paste0(
tumor, ": ", anc1, " vs ", anc2, " (", measure, ")"
),
x = paste0("Mean in ", anc1),
y = paste0("Mean in ", anc2)
) +
theme_minimal()
################# Looking comparison plots again
plot_sig_means <- function(anc1, anc2, tumor, measure = c("fraction", "count")) {
measure <- match.arg(measure)
# Subset results
subset_tcga <- all_results %>%
mutate(ancestries = paste0(ancestry1, "_v_", ancestry2)) %>%
filter(
tumor_type == tumor,
ancestries == paste0(anc1, "_v_", anc2),
measure == !!measure,
!is.na(p_value)
)
ggplot(subset_tcga, aes(x = mean1, y = mean2, label = signature)) +
geom_point(color = ifelse(measure == "fraction", "darkorange", "steelblue")) +
# Error bars for ancestry1 (x-axis)
geom_errorbarh(aes(xmin = mean1 - sd1/sqrt(n1), xmax = mean1 + sd1/sqrt(n1)),
height = 0, alpha = 0.5) +
# Error bars for ancestry2 (y-axis)
geom_errorbar(aes(ymin = mean2 - sd2/sqrt(n2), ymax = mean2 + sd2/sqrt(n2)),
width = 0, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray40") +
ggrepel::geom_label_repel(
data = subset_tcga %>%
filter(p_value < 0.05, abs(mean1 - mean2) > 0.01),
aes(label = signature),
max.overlaps = 20
) +
labs(
title = paste0(
tumor, ": ", anc1, " vs ", anc2, " (", measure, ")"
),
x = paste0("Mean in ", anc1),
y = paste0("Mean in ", anc2)
) +
theme_minimal()
}
plot_sig_means("afr", "eas", "LUAD", measure = "fraction")
plot_sig_means("afr", "eas", "LUAD", measure = "count")
################# Looking comparison plots again
plot_sig_means <- function(anc1, anc2, tumor, measure = c("fraction", "count")) {
measure <- match.arg(measure)
# Subset results
subset_tcga <- all_results %>%
mutate(ancestries = paste0(ancestry1, "_v_", ancestry2)) %>%
filter(
tumor_type == tumor,
ancestries == paste0(anc1, "_v_", anc2),
measure == !!measure,
!is.na(p_value)
)
ggplot(subset_tcga, aes(x = mean1, y = mean2, label = signature)) +
geom_point(color = ifelse(measure == "fraction", "darkorange", "steelblue")) +
# Error bars for ancestry1 (x-axis)
geom_errorbarh(aes(xmin = mean1 - sd1/sqrt(n1), xmax = mean1 + sd1/sqrt(n1)),
height = 0, alpha = 0.5) +
# Error bars for ancestry2 (y-axis)
geom_errorbar(aes(ymin = mean2 - sd2/sqrt(n2), ymax = mean2 + sd2/sqrt(n2)),
width = 0, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray40") +
geom_label_repel(max.overlaps = 20) +
# ggrepel::geom_label_repel(
#   data = subset_tcga %>%
#     filter(p_value < 0.05, abs(mean1 - mean2) > 0.01),
#   aes(label = signature),
#   max.overlaps = 20
# ) +
labs(
title = paste0(
tumor, ": ", anc1, " vs ", anc2, " (", measure, ")"
),
x = paste0("Mean in ", anc1),
y = paste0("Mean in ", anc2)
) +
theme_minimal()
}
plot_sig_means("afr", "eas", "LUAD", measure = "fraction")
plot_sig_means("afr", "eas", "LUAD", measure = "count")
plot_sig_means("eas", "eur", "LUAD", measure = "fraction")
plot_sig_means("eas", "eur", "LUAD", measure = "count")
plot_sig_means("eas", "eur", "BLCA", measure = "fraction")
plot_sig_means("eas", "eur", "BLCA", measure = "count")
plot_sig_means("eas", "eur", "LUAD", measure = "fraction")
plot_sig_means("eas", "eur", "LUAD", measure = "count")
plot_sig_means("eas", "eur", "ESCA", measure = "fraction")
plot_sig_means("eas", "eur", "ESCA", measure = "count")
ancestry_amsd_output
# Function to make multi-panel plots for top hits
plot_top_hits <- function(df, p_cutoff = 0.05, measure_type = "fraction") {
top_hits <- df %>%
filter(pvalues < p_cutoff) %>%
arrange(pvalues)
# Generate plots
plots <- map(seq_len(nrow(top_hits)), function(i) {
row <- top_hits[i, ]
plot_sig_means(row$ancestry1, row$ancestry2, row$tumor_type, measure_type)
})
# Combine into a grid
wrap_plots(plots, ncol = 2)
}
plot_top_hits(ancestry_amsd_output, p_cutoff = 0.001, measure_type = "fraction")
library(patchwork)
# Function to make multi-panel plots for top hits
plot_top_hits <- function(df, p_cutoff = 0.05, measure_type = "fraction") {
top_hits <- df %>%
filter(pvalues < p_cutoff) %>%
arrange(pvalues)
# Generate plots
plots <- map(seq_len(nrow(top_hits)), function(i) {
row <- top_hits[i, ]
plot_sig_means(row$ancestry1, row$ancestry2, row$tumor_type, measure_type)
})
# Combine into a grid
wrap_plots(plots, ncol = 2)
}
plot_top_hits(ancestry_amsd_output, p_cutoff = 0.001, measure_type = "fraction")
# Function to make multi-panel plots for top hits
plot_top_hits <- function(df, p_cutoff = 0.05, measure_type = "fraction") {
top_hits <- df %>%
filter(pvalues < p_cutoff) %>%
arrange(pvalues)
# Generate plots
plots <- map(seq_len(nrow(top_hits)), function(i) {
row <- top_hits[i, ]
plot_sig_means(row$ancestry1, row$ancestry2, row$tumor_type, measure_type)
})
# Combine into a grid
wrap_plots(plots, ncol = 3)
}
plot_top_hits(ancestry_amsd_output, p_cutoff = 0.01, measure_type = "fraction")
plot_top_hits(ancestry_amsd_output, p_cutoff = 0.01, measure_type = "counts")
plot_top_hits(ancestry_amsd_output, p_cutoff = 0.01, measure_type = "count")
################# Looking comparison plots again
plot_sig_means <- function(anc1, anc2, tumor, measure = c("fraction", "count")) {
measure <- match.arg(measure)
# Subset results
subset_tcga <- all_results %>%
mutate(ancestries = paste0(ancestry1, "_v_", ancestry2)) %>%
filter(
tumor_type == tumor,
ancestries == paste0(anc1, "_v_", anc2),
measure == !!measure,
!is.na(p_value)
)
ggplot(subset_tcga, aes(x = mean1, y = mean2, label = signature)) +
geom_point(color = ifelse(measure == "fraction", "darkorange", "steelblue")) +
# Error bars for ancestry1 (x-axis)
geom_errorbarh(aes(xmin = mean1 - sd1/sqrt(n1), xmax = mean1 + sd1/sqrt(n1)),
height = 0, alpha = 0.5) +
# Error bars for ancestry2 (y-axis)
geom_errorbar(aes(ymin = mean2 - sd2/sqrt(n2), ymax = mean2 + sd2/sqrt(n2)),
width = 0, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray40") +
# geom_label_repel(max.overlaps = 20) +
ggrepel::geom_label_repel(
data = subset_tcga %>%
filter(p_value < 0.05, abs(mean1 - mean2) > 0.01, mean1/mean2 > 1.1 | mean2/mean1 > 1.1),
aes(label = signature),
max.overlaps = 20
) +
labs(
title = paste0(
tumor, ": ", anc1, " vs ", anc2, " (", measure, ")"
),
x = paste0("Mean in ", anc1),
y = paste0("Mean in ", anc2)
) +
theme_minimal()
}
plot_sig_means("afr", "eas", "LUAD", measure = "fraction")
plot_sig_means("afr", "eas", "LUAD", measure = "count")
################# Looking comparison plots again
plot_sig_means <- function(anc1, anc2, tumor, measure = c("fraction", "count")) {
measure <- match.arg(measure)
# Subset results
subset_tcga <- all_results %>%
mutate(ancestries = paste0(ancestry1, "_v_", ancestry2)) %>%
filter(
tumor_type == tumor,
ancestries == paste0(anc1, "_v_", anc2),
measure == !!measure,
!is.na(p_value)
)
ggplot(subset_tcga, aes(x = mean1, y = mean2, label = signature)) +
geom_point(color = ifelse(measure == "fraction", "darkorange", "steelblue")) +
# Error bars for ancestry1 (x-axis)
geom_errorbarh(aes(xmin = mean1 - sd1/sqrt(n1), xmax = mean1 + sd1/sqrt(n1)),
height = 0, alpha = 0.5) +
# Error bars for ancestry2 (y-axis)
geom_errorbar(aes(ymin = mean2 - sd2/sqrt(n2), ymax = mean2 + sd2/sqrt(n2)),
width = 0, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray40") +
# geom_label_repel(max.overlaps = 20) +
ggrepel::geom_label_repel(
data = subset_tcga %>%
filter(p_value < 0.05,
abs(mean1 - mean2) > 0.01,
mean1/mean2 > 1.1 | mean2/mean1 > 1.1),
aes(label = signature),
max.overlaps = 20
) +
labs(
title = paste0(
tumor, ": ", anc1, " vs ", anc2, " (", measure, ")"
),
x = paste0("Mean in ", anc1),
y = paste0("Mean in ", anc2)
) +
theme_minimal()
}
# Function to make multi-panel plots for top hits
plot_top_hits <- function(df, p_cutoff = 0.05, measure_type = "fraction") {
top_hits <- df %>%
filter(pvalues < p_cutoff) %>%
arrange(pvalues)
# Generate plots
plots <- map(seq_len(nrow(top_hits)), function(i) {
row <- top_hits[i, ]
plot_sig_means(row$ancestry1, row$ancestry2, row$tumor_type, measure_type)
})
# Combine into a grid
wrap_plots(plots, ncol = 3)
}
plot_top_hits(ancestry_amsd_output, p_cutoff = 0.01, measure_type = "fraction")
plot_top_hits(ancestry_amsd_output, p_cutoff = 0.01, measure_type = "count")
library(tidyverse)
library(ggrepel)
# load data
# setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/AMSD_cancer_mutation_spectra/scripts")
mouse_amsd_output <- readRDS("../outputs/mouse_amsd_output.rds")
mouse_amsd_output2 <- readRDS("../outputs/mouse_amsd_output_unweighted.rds")
mouse_amsd_output$pvalues2 <- mouse_amsd_output2$pvalues
# perms <- readRDS("../outputs/mouse_amsd_perms.rds")
# mexposuresig <- readRDS("../inputs/mouse_exposuresig.rds")
# mexposure <- readRDS("../inputs/mouse_exposure.rds")
# mouse_carcinogen_counts <- readRDS("../inputs/mouse_carcinogen_spectra.rds") # counts
# mouse_carcinogen_spectra <- mouse_carcinogen_counts/rowSums(mouse_carcinogen_counts) # spectra
# load data
ancestry_amsd_output <- readRDS("../outputs/ancestry_amsd_output.rds")
ancestry_amsd_output2 <- readRDS("../outputs/ancestry_amsd_output_unweighted.rds")
ancestry_amsd_output$pvalues2 <- ancestry_amsd_output2$pvalues
anc_spectra <- readRDS("../outputs/ancestry_spectra.rds")
# perms <- readRDS("../outputs/ancestry_amsd_perms.rds")
ancestry_amsd_output %>%
ggplot(aes(-log10(pvalues),-log10(pvalues2), color = comparison, label = tumor_type)) +
geom_point() +
geom_smooth(method = "lm",
inherit.aes = FALSE,
aes(-log10(pvalues),
-log10(pvalues2)),
color = "black")+
geom_label_repel()+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/67))+
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/67))+
labs(x = "-log10(p-value): all samples weighted equally",
y = "-log10(p-value): samples weighted by mutation count")
anc_spectra %>%
filter(tumor_type == "KIRP") %>%
ggplot(aes(anc3, mut_counts))+
geom_boxplot()+
geom_point()
anc_spectra %>%
filter(tumor_type == "KIRP", anc3 == "eas")
anc_spectra %>%
filter(tumor_type == "BLCA") %>%
ggplot(aes(anc3, mut_counts))+
geom_boxplot()+
geom_point()
anc_spectra %>%
filter(tumor_type == "UCEC") %>%
ggplot(aes(anc3, mut_counts))+
geom_boxplot()+
geom_point()
%>% plot_spectrum()
anc_spectra %>%
filter(tumor_type == "KIRP", anc3 == "eas") %>%
select(-IID, -tumor_type, -consensus_ancestry, -anc2, -anc3, -mut_counts) %>%
plot_spectrum()
librayr(sigfit
library(sigfit)
# load data
# setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/AMSD_cancer_mutation_spectra/scripts")
mouse_amsd_output <- readRDS("../outputs/mouse_amsd_output.rds")
library(sigfit)
anc_spectra %>%
filter(tumor_type == "KIRP") %>%
ggplot(aes(anc3, mut_counts))+
geom_boxplot()+
geom_point()
anc_spectra %>%
filter(tumor_type == "BLCA") %>%
ggplot(aes(anc3, mut_counts))+
geom_boxplot()+
geom_point()
anc_spectra %>%
filter(tumor_type == "UCEC") %>%
ggplot(aes(anc3, mut_counts))+
geom_boxplot()+
geom_point()
anc_spectra %>%
filter(tumor_type == "KIRP", anc3 == "eas") %>%
select(-IID, -tumor_type, -consensus_ancestry, -anc2, -anc3, -mut_counts) %>%
plot_spectrum()
anc_spectra %>%
filter(tumor_type == "UCEC") %>%
ggplot(aes(anc3, mut_counts))+
geom_boxplot()+
geom_point()
anc_spectra %>%
filter(tumor_type == "UCEC", anc %in% c("eur", "eas")) %>%
ggplot(aes(anc3, mut_counts))+
geom_boxplot()+
geom_point()
anc_spectra %>%
filter(tumor_type == "UCEC", anc3 %in% c("eur", "eas")) %>%
ggplot(aes(anc3, mut_counts))+
geom_boxplot()+
geom_point()
anc_spectra %>%
filter(tumor_type == "KIRP", anc3 %in% c("eur", "eas"))  %>%
ggplot(aes(anc3, mut_counts))+
geom_boxplot()+
geom_point()
anc_spectra %>%
filter(tumor_type == "KIRP", anc3 == "eas") #%>%
anc_spectra %>%
filter(tumor_type == "UCEC", anc3 %in% c("eur", "eas", "eur")) %>%
ggplot(aes(anc3, mut_counts))+
geom_boxplot()+
geom_point()
anc_spectra %>%
filter(tumor_type == "UCEC", anc3 %in% c("afr", "eas", "eur")) %>%
ggplot(aes(anc3, mut_counts))+
geom_boxplot()+
geom_point()
perms <- readRDS("../outputs/ancestry_amsd_perms.rds")
perms2 <- readRDS("../outputs/ancestry_amsd_perms_unweighted.rds")
head(perms)
kirp <- data.frame(mean_method = perms$KIRP.eas_eur, sum_method = perms2$KIRP.eas_eur)
kirp
perms$KIRP.eas_eur
perms$KIRP.eas_eur %>%
as.data.frame()
perms %>%
ggplot(aes(KIRP.eas_eur))+
geom_histogram()
ancestry_amsd_output
ancestry_amsd_output[26,"cosines"]
ancestry_amsd_output2
perms %>%
ggplot(aes(KIRP.eas_eur))+
geom_histogram()+
geom_vline(xintercept = ancestry_amsd_output[26,"cosines"])
perms2 %>%
ggplot(aes(KIRP.eas_eur))+
geom_histogram()+
geom_vline(xintercept = ancestry_amsd_output2[26,"cosines"])
anc_spectra %>%
filter(tumor_type == "LUAD", anc3 %in% c("afr", "eas", "eur")) %>%
ggplot(aes(anc3, mut_counts))+
geom_boxplot()+
geom_point()
perms %>%
ggplot(aes(UCEC.eas_eur))+
geom_histogram()+
geom_vline(xintercept = ancestry_amsd_output[66,"cosines"])
perms2 %>%
ggplot(aes(UCEC.eas_eur))+
geom_histogram()+
geom_vline(xintercept = ancestry_amsd_output2[66,"cosines"])
perms %>%
ggplot(aes(UCEC.eas_eur))+
geom_histogram()+
geom_vline(xintercept = ancestry_amsd_output[66,"cosines"])
perms2 %>%
ggplot(aes(UCEC.eas_eur))+
geom_histogram()+
geom_vline(xintercept = ancestry_amsd_output2[66,"cosines"])
perms %>%
ggplot(aes(BLCA.eas_eur))+
geom_histogram()+
geom_vline(xintercept = ancestry_amsd_output[3,"cosines"])
perms2 %>%
ggplot(aes(BLCA.eas_eur))+
geom_histogram()+
geom_vline(xintercept = ancestry_amsd_output2[3,"cosines"])
plot_sig_means("afr", "eas", "LUAD", measure = "fraction")
plot_sig_means("eas", "eur", "KIRP", measure = "fraction")
plot_sig_means("eas", "eur", "KIRP", measure = "count")
################# Looking comparison plots again
plot_sig_means <- function(anc1, anc2, tumor, measure = c("fraction", "count")) {
measure <- match.arg(measure)
# Subset results
subset_tcga <- all_results %>%
mutate(ancestries = paste0(ancestry1, "_v_", ancestry2)) %>%
filter(
tumor_type == tumor,
ancestries == paste0(anc1, "_v_", anc2),
measure == !!measure,
!is.na(p_value)
)
ggplot(subset_tcga, aes(x = mean1, y = mean2, label = signature)) +
geom_point(color = ifelse(measure == "fraction", "darkorange", "steelblue")) +
# Error bars for ancestry1 (x-axis)
geom_errorbarh(aes(xmin = mean1 - sd1/sqrt(n1), xmax = mean1 + sd1/sqrt(n1)),
height = 0, alpha = 0.5) +
# Error bars for ancestry2 (y-axis)
geom_errorbar(aes(ymin = mean2 - sd2/sqrt(n2), ymax = mean2 + sd2/sqrt(n2)),
width = 0, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray40") +
# geom_label_repel(max.overlaps = 20) +
# ggrepel::geom_label_repel(
#   data = subset_tcga %>%
#     filter(p_value < 0.05,
#            abs(mean1 - mean2) > 0.01,
#            mean1/mean2 > 1.1 | mean2/mean1 > 1.1),
#   aes(label = signature),
#   max.overlaps = 20
# ) +
labs(
title = paste0(
tumor, ": ", anc1, " vs ", anc2, " (", measure, ")"
),
x = paste0("Mean in ", anc1),
y = paste0("Mean in ", anc2)
) +
theme_minimal()
}
plot_sig_means("afr", "eas", "LUAD", measure = "fraction")
################# Looking comparison plots again
plot_sig_means <- function(anc1, anc2, tumor, measure = c("fraction", "count")) {
measure <- match.arg(measure)
# Subset results
subset_tcga <- all_results %>%
mutate(ancestries = paste0(ancestry1, "_v_", ancestry2)) %>%
filter(
tumor_type == tumor,
ancestries == paste0(anc1, "_v_", anc2),
measure == !!measure,
!is.na(p_value)
)
ggplot(subset_tcga, aes(x = mean1, y = mean2, label = signature)) +
geom_point(color = ifelse(measure == "fraction", "darkorange", "steelblue")) +
# Error bars for ancestry1 (x-axis)
geom_errorbarh(aes(xmin = mean1 - sd1/sqrt(n1), xmax = mean1 + sd1/sqrt(n1)),
height = 0, alpha = 0.5) +
# Error bars for ancestry2 (y-axis)
geom_errorbar(aes(ymin = mean2 - sd2/sqrt(n2), ymax = mean2 + sd2/sqrt(n2)),
width = 0, alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray40") +
geom_label_repel(max.overlaps = 20) +
# ggrepel::geom_label_repel(
#   data = subset_tcga %>%
#     filter(p_value < 0.05,
#            abs(mean1 - mean2) > 0.01,
#            mean1/mean2 > 1.1 | mean2/mean1 > 1.1),
#   aes(label = signature),
#   max.overlaps = 20
# ) +
labs(
title = paste0(
tumor, ": ", anc1, " vs ", anc2, " (", measure, ")"
),
x = paste0("Mean in ", anc1),
y = paste0("Mean in ", anc2)
) +
theme_minimal()
}
plot_sig_means("eas", "eur", "KIRP", measure = "fraction")
plot_sig_means("eas", "eur", "BLCA", measure = "fraction")
plot_sig_means("eas", "eur", "UCEC", measure = "fraction")
plot_sig_means("eas", "eur", "UCEC", measure = "count")
plot_sig_means("eas", "eur", "KIRP", measure = "fraction")
plot_sig_means("eas", "eur", "KIRP", measure = "count")
