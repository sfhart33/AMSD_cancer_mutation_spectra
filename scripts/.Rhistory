spectrum_summary(b3, "out=Muscle (cov)"),
spectrum_summary(b4, "out=WBC (cov)")
) %>%
plot_spectrum(pdf_path = "4_celltype_test_spectra.pdf")
rbind(
spectrum_summary(a1, "out=hepatocyte"),
spectrum_summary(rbind(a2,a3,a4), "out=non-hepatocyte"),
spectrum_summary(b1, "out=hepatocyte (cov)"),
spectrum_summary(rbind(b2,b3,b4), "out=non-hepatocyte (cov)")
) %>%
plot_spectrum(pdf_path = "4_celltype_test_spectraB.pdf")
bed_granges$shared_cov1000
library(BSgenome.Mmusculus.UCSC.mm10)
library(Biostrings)
library(sigfit)
library(data.table)
data("cosmic_signatures_v2")
library(GenomicRanges)
library(rtracklayer)
library(tidyverse)
library(ggpubr)
split_tables_vaf_trinuc <- readRDS(file="split_tables_vaf_trinuc.RDS")
split_tables_vaf_trinuc
split_tables_vaf_trinuc$`JAX_P0_L1-08`$unique
split_tables_vaf_trinuc$`JAX_P0_L1-08`$unique %>%
mutate(start = pos, end = pos + 1) %>%
makeGRangesFromDataFrame()
split_tables_vaf_trinuc <- readRDS(file="split_tables_vaf_trinuc.RDS")
# split_tables_vaf_trinuc
split_tables_vaf_trinuc$`JAX_P0_L1-08`$unique
split_tables_vaf_trinuc$`JAX_P0_L1-08`$unique %>%
mutate(start = pos, end = pos + 1) %>%
makeGRangesFromDataFrame()
# Point to the folder with your merged BEDs
bed_dir <- "beds/"
# Load all shared bed files (e.g., shared_cov10_all.bed, shared_cov100_all.bed, etc.)
merged_beds <- list.files(bed_dir, pattern = "^shared_.*\\.bed$", full.names = TRUE)
# Read into named GRanges list
bed_granges <- setNames(
lapply(merged_beds, import),
nm = gsub("\\.bed$", "", basename(merged_beds))
)
bed_granges$shared_cov10
# Read in summary data
coverage_summary_P0 <- read_tsv(file.path(bed_dir, "coverage_summary_P0.tsv")) %>%
separate(Sample_ID, into = c("sample","threshold",NA), sep= "\\.")
coverage_summary_indivs <- read_tsv(file.path(bed_dir, "coverage_summary_indivs.tsv"))%>%
separate(Sample_ID, into = c("sample","threshold"), sep= ".q10.sorted.merged.")
coverage_summary_samples <- coverage_summary_indivs %>%
filter(!is.na(threshold))
coverage_summary_overall <- coverage_summary_indivs %>%
filter(is.na(threshold)) %>%
separate(sample, into = c("sample","threshold"), sep= "_")
coverage_summary_P0
coverage_summary_samples
coverage_summary_overall
# Function to summarize filtered variants
summarize_variant_coverage <- function(split_tables_vaf_trinuc, coverage_gr_list) {
stopifnot(is.list(coverage_gr_list), is.list(split_tables_vaf_trinuc))
results <- map_dfr(names(split_tables_vaf_trinuc), function(sample_id) {
sample_data <- split_tables_vaf_trinuc[[sample_id]]
map_dfr(c("shared", "unique"), function(category) {
variant_df <- sample_data[[category]]
if (is.null(variant_df) || !"pos" %in% colnames(variant_df) || nrow(variant_df) == 0) {
return(tibble(
sample = sample_id,
category = category,
coverage = names(coverage_gr_list),
n_variants_before = 0,
n_variants_after = 0
))
}
# Convert to GRanges
variants_gr <- variant_df %>%
mutate(start = pos, end = pos + 1) %>%
makeGRangesFromDataFrame()
n_before <- length(variants_gr)
# Harmonize seqlevel styles
map_dfr(names(coverage_gr_list), function(cov_name) {
covered_gr <- coverage_gr_list[[cov_name]]
seqlevelsStyle(variants_gr) <- seqlevelsStyle(covered_gr)
n_after <- length(subsetByOverlaps(variants_gr, covered_gr))
tibble(
sample = sample_id,
category = category,
coverage = cov_name,
n_variants_before = n_before,
n_variants_after = n_after
)
})
})
})
return(results)
}
# Assume these are your GRanges objects for thresholds:
coverage_gr_list <- list(
cov10 = bed_granges$shared_cov10,
cov100 = bed_granges$shared_cov100,
cov1000 = bed_granges$shared_cov1000,
median = bed_granges$shared_median
)
# Run the function
summary_df <- summarize_variant_coverage(split_tables_vaf_trinuc, coverage_gr_list)
summary_df <- summary_df %>%
mutate(
dev_day = if_else(
str_detect(sample, "P0"),     # if sample contains "P0"
20,                          # assign dev_day = 20
str_extract(sample, "E\\d+\\.?\\d*") %>%
str_remove("^E") %>%
as.numeric()               # else extract embryonic day as numeric
)
)
print(summary_df)
# Assume these are your GRanges objects for thresholds:
coverage_gr_list <- list(
cov10 = bed_granges$shared_cov10,
cov100 = bed_granges$shared_cov100,
cov1000 = bed_granges$shared_cov1000,
median = bed_granges$shared_median
)
bed_granges$shared_cov1000
regions <- bed_granges$shared_cov1000
# Function to count trinucleotide frequencies
get_trinuc_counts <- function(gr, genome) {
# Trim edges to avoid overhangs for 1bp flanking
gr <- trim(granges(resize(gr, width = width(gr) - 2, fix = "center")))
# Expand to 3bp centered windows
windows <- resize(gr, width = 3, fix = "center")
# Get sequences
seqs <- getSeq(genome, windows)
# Filter out N's
valid_seqs <- seqs[!grepl("N", seqs)]
# Get reverse complements where center base is A or G
mid <- substring(valid_seqs, 2, 2)
rc_index <- which(mid %in% c("A", "G"))
valid_seqs[rc_index] <- reverseComplement(valid_seqs[rc_index])
# Tabulate
tab <- table(as.character(valid_seqs))
return(as.data.frame(tab, stringsAsFactors = FALSE) %>%
dplyr::rename(trinuc = Var1, count = Freq))
}
# Count in your regions vs full genome
genome <- BSgenome.Mmusculus.UCSC.mm10
# Your target regions
target_counts <- get_trinuc_counts(regions, genome)
regions <- bed_granges$shared_cov1000
# Function to count trinucleotide frequencies
get_trinuc_counts <- function(gr, genome) {
# Filter out regions too small to get a 3-mer
gr <- gr[width(gr) >= 3]
# Resize to center on 3-mer
windows <- resize(gr, width = 3, fix = "center")
# Trim to chromosome bounds
windows <- trim(windows)
# Get sequences
seqs <- getSeq(genome, windows)
# Filter out N's
valid_seqs <- seqs[!grepl("N", seqs)]
# Reverse-complement purines to get pyrimidine-centered orientation
mid <- substring(valid_seqs, 2, 2)
rc_idx <- which(mid %in% c("A", "G"))
valid_seqs[rc_idx] <- reverseComplement(valid_seqs[rc_idx])
# Tabulate
tab <- table(as.character(valid_seqs))
return(as.data.frame(tab, stringsAsFactors = FALSE) %>%
dplyr::rename(trinuc = Var1, count = Freq))
}
##############################
# Count in your regions vs full genome
genome <- BSgenome.Mmusculus.UCSC.mm10
# Your target regions
target_counts <- get_trinuc_counts(regions, genome)
# The whole genome — get all non-N regions
genome_windows <- tileGenome(seqlengths(genome), tilewidth = 3, step = 1, cut.last.tile.in.chrom = TRUE)
genome_seqs <- getSeq(genome, genome_windows)
valid_idx <- !grepl("N", genome_seqs)
genome_windows <- genome_windows[valid_idx]
# Count in full genome
genome_counts <- get_trinuc_counts(genome_windows, genome)
# Merge counts
counts <- full_join(genome_counts, target_counts, by = "trinuc", suffix = c("_genome", "_target")) %>%
mutate(
genome_prop = count_genome / sum(count_genome),
target_prop = count_target / sum(count_target),
enrichment = target_prop / genome_prop
)
counts
regions <- bed_granges$shared_cov1000
# Function to count trinucleotide frequencies
get_trinuc_counts <- function(gr, genome) {
# Filter out regions too small to get a 3-mer
gr <- gr[width(gr) >= 3]
# Resize to center on 3-mer
windows <- resize(gr, width = 3, fix = "center")
# Trim to chromosome bounds
windows <- trim(windows)
# Get sequences
seqs <- getSeq(genome, windows)
# Filter out N's
valid_seqs <- seqs[!grepl("N", seqs)]
# Reverse-complement purines to get pyrimidine-centered orientation
mid <- substring(valid_seqs, 2, 2)
rc_idx <- which(mid %in% c("A", "G"))
valid_seqs[rc_idx] <- reverseComplement(valid_seqs[rc_idx])
# Tabulate
tab <- table(as.character(valid_seqs))
return(as.data.frame(tab, stringsAsFactors = FALSE) %>%
dplyr::rename(trinuc = Var1, count = Freq))
}
# Count in your regions vs full genome
genome <- BSgenome.Mmusculus.UCSC.mm10
# Your target regions
target_counts <- get_trinuc_counts(regions, genome)
# The whole genome — get all non-N regions
genome_windows <- tileGenome(seqlengths(genome), tilewidth = 3, step = 1, cut.last.tile.in.chrom = TRUE)
genome_seqs <- getSeq(genome, genome_windows)
# The whole genome — get all non-N regions
genome_windows <- tileGenome(seqlengths(genome), tilewidth = 3, step = 1, cut.last.tile.in.chrom = TRUE)
# Function to count trinucleotide frequencies
get_trinuc_counts <- function(gr, genome) {
# Filter out regions too small to get a 3-mer
gr <- gr[width(gr) >= 3]
# Resize to center on 3-mer
windows <- resize(gr, width = 3, fix = "center")
# Trim to chromosome bounds
windows <- trim(windows)
# Get sequences
seqs <- getSeq(genome, windows)
# Filter out N's
valid_seqs <- seqs[!grepl("N", seqs)]
# Reverse-complement purines to get pyrimidine-centered orientation
mid <- substring(valid_seqs, 2, 2)
rc_idx <- which(mid %in% c("A", "G"))
valid_seqs[rc_idx] <- reverseComplement(valid_seqs[rc_idx])
# Tabulate
tab <- table(as.character(valid_seqs))
return(as.data.frame(tab, stringsAsFactors = FALSE) %>%
dplyr::rename(trinuc = Var1, count = Freq))
}
# Count in your regions vs full genome
genome <- BSgenome.Mmusculus.UCSC.mm10
# Your target regions
target_counts <- get_trinuc_counts(regions, genome)
# The whole genome — get all non-N regions
genome_windows <- tileGenome(seqlengths(genome), tilewidth = 3, step = 1, cut.last.tile.in.chrom = TRUE)
regions <- bed_granges$shared_cov1000
# Function to count trinucleotide frequencies
get_trinuc_counts <- function(gr, genome) {
# Filter out regions too small to get a 3-mer
gr <- gr[width(gr) >= 3]
# Resize to center on 3-mer
windows <- resize(gr, width = 3, fix = "center")
# Trim to chromosome bounds
windows <- trim(windows)
# Get sequences
seqs <- getSeq(genome, windows)
# Filter out N's
valid_seqs <- seqs[!grepl("N", seqs)]
# Reverse-complement purines to get pyrimidine-centered orientation
mid <- substring(valid_seqs, 2, 2)
rc_idx <- which(mid %in% c("A", "G"))
valid_seqs[rc_idx] <- reverseComplement(valid_seqs[rc_idx])
# Tabulate
tab <- table(as.character(valid_seqs))
return(as.data.frame(tab, stringsAsFactors = FALSE) %>%
dplyr::rename(trinuc = Var1, count = Freq))
}
get_genome_trinuc_windows <- function(genome, tile_width = 3) {
all_tiles <- lapply(names(seqlengths(genome)), function(chr) {
chr_len <- seqlengths(genome)[chr]
# Ensure windows don't overrun chromosome
starts <- seq(1, chr_len - tile_width + 1, by = 1)
GRanges(seqnames = chr,
ranges = IRanges(start = starts, width = tile_width))
})
do.call(c, all_tiles)
}
##############################
# Count in your regions vs full genome
genome <- BSgenome.Mmusculus.UCSC.mm10
# Your target regions
target_counts <- get_trinuc_counts(regions, genome)
# The whole genome — get all non-N regions
genome_windows <- get_genome_trinuc_windows(BSgenome.Mmusculus.UCSC.mm10)
genome_seqs <- getSeq(genome, genome_windows)
valid_idx <- !grepl("N", genome_seqs)
genome_windows <- genome_windows[valid_idx]
# Count in full genome
genome_counts <- get_trinuc_counts(genome_windows, genome)
# Merge counts
counts <- full_join(genome_counts, target_counts, by = "trinuc", suffix = c("_genome", "_target")) %>%
mutate(
genome_prop = count_genome / sum(count_genome),
target_prop = count_target / sum(count_target),
enrichment = target_prop / genome_prop
)
counts
head(genome_windows)
# The whole genome — get all non-N regions
genome_windows <- get_genome_trinuc_windows(BSgenome.Mmusculus.UCSC.mm10)
target_counts
getwd()
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE)
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = " ")
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "")
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "")
read.delim("csv/mm10.cov1000.trinuc.txt", stringsAsFactors = FALSE, sep = "")
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "")
read.delim("csv/mm10_trinuc_freq.tsv", stringsAsFactors = FALSE)
getwd()
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov1000.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov1000.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov1000.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
# read.delim("csv/mm10.all.trinuc.txt", stringsAsFactors = FALSE) %>%
#   column_to_rownames(var = "Substitution") %>%
#   t() %>%
#   plot_spectrum()
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov1000.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.all.trinuc.txt", stringsAsFactors = FALSE) %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov1000.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.all.trinuc.txt", stringsAsFactors = FALSE) %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") #%>%
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
?column_to_rownames
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov1000.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.all.trinuc.txt", stringsAsFactors = FALSE) %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.all.trinuc.txt", stringsAsFactors = FALSE) #%>%
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov1000.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.all.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
cov100 <- read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t()
cov1000 <- read.delim("csv/mm10.cov1000.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t()
cov0 <- read.delim("csv/mm10.all.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t()
cov0
rbind(cov0, cov100, cov1000)
cov100 <- read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t()
cov1000 <- read.delim("csv/mm10.cov1000.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t()
cov0 <- read.delim("csv/mm10.all.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t()
summary_coverage_trinuc <- rbind(cov0, cov100, cov1000)
rownames(summary_coverage_trinuc) <- c("Full genome", "Coverage 100+ in all samples", "Coverage 1000+ in all samples")
plot_spectrum(summary_coverage_trinuc, pdf_path = "genome_coverage_spectra.pdf")
devtools::install_github("MaikeMorrison/sigvar", dependencies = TRUE, build_vignettes = TRUE)
warnings()
devtools::install_github("MaikeMorrison/sigvar",
dependencies = TRUE,
build_vignettes = FALSE,
upgrade = "never")
read_delim("mutsig_carcinogens_mice_bootstrap_p_vals.tsv")
read.delim("mutsig_carcinogens_mice_bootstrap_p_vals.tsv")
getwd()
setwd("..")
setwd("..")
getwd()
list.files()
setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/AMSD_cancer_mutation_spectra/scripts")
read.delim("mutsig_carcinogens_mice_bootstrap_p_vals.tsv")
read.delim("../inputs/mutsig_carcinogens_mice_bootstrap_p_vals.tsv")
input <- read.delim("../inputs/mutsig_carcinogens_mice_bootstrap_p_vals.tsv")
input
View(input)
readRDS("mutsig_carcinogens_mice_bootstrap_p_vals.RDS")
readRDS("../inputs/mutsig_carcinogens_mice_bootstrap_p_vals.RDS")
input <- readRDS("../inputs/mutsig_carcinogens_mice_bootstrap_p_vals.RDS")
View(input)
input <- readRDS("../inputs/mutsig_carcinogens_mice_bootstrap_p_vals.RDS")
input2 <- readRDS("mutsig_carcinogens_mice_sigvar.RDS")
input <- readRDS("../inputs/mutsig_carcinogens_mice_bootstrap_p_vals.RDS")
input2 <- readRDS("../inputs/mutsig_carcinogens_mice_sigvar.RDS")
input2
View(input2)
View(input)
input2 %>%
group_by(chemical, Tissue) %>%
summarise(n = n(),
mean_within = mean(within))
library(tidyverse)
input2 %>%
group_by(chemical, Tissue) %>%
summarise(n = n(),
mean_within = mean(within))
input2 %>%
group_by(chemical, Tissue) %>%
summerise(n = n(),
mean_within = mean(within))
input2 %>%
group_by(chemical, Tissue) #%>%
librayr(tidyverse)
library(tidyverse)
?group_by
input2 %>%
group_by(chemical, Tissue) #%>%
input2 %>%
dplyr::group_by(chemical, Tissue) #%>%
input2 %>%
dplyr::group_by(chemical, Tissue) %>%
summerise(n = n(),
mean_within = mean(within))
input2 %>%
dplyr::group_by(chemical, Tissue) %>%
dplyr::summerise(n = n(),
mean_within = mean(within))
?summerise
input2 %>%
dplyr::group_by(chemical, Tissue) %>%
summarise(n = n(),
mean_within = mean(within))
?summarise
input2 %>%
dplyr::group_by(chemical, Tissue) %>%
summarise(n = n(),
mean_within = mean(within))
input2 %>%
dplyr::group_by(chemical, Tissue) %>%
dplyr::summarise(n = n(),
mean_within = mean(within))
input2 %>%
dplyr::group_by(chemical, Tissue) %>%
dplyr::summarise(n = n(),
mean_within = mean(within))
