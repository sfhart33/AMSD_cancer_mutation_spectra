names_to = "signature",
values_to = "exposure"
) %>%
ggplot(aes(x = signature, y = exposure)) +
geom_jitter() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
ggplot(aes(x = signature, y = exposure)) +
geom_jitter(height = 0) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
ggplot(aes(x = signature, y = exposure)) +
geom_jitter(height = 0,width = 0.2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
ggplot(aes(x = signature, y = exposure)) +
#geom_jitter(height = 0,width = 0.2) +
geom_dotplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
ggplot(aes(x = signature, y = exposure)) +
#geom_jitter(height = 0,width = 0.2) +
geom_dotplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
ggplot(aes(x = signature, y = exposure)) +
geom_jitter(height = 0,width = 0.2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
ggplot(aes(x = signature, y = exposure, color = sample_id)) +
geom_jitter(height = 0,width = 0.2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
filter(signature %in% c("SBS38","SBS53","SBS49","SBS7c")) %>%
ggplot(aes(x = signature, y = exposure, color = sample_id)) +
geom_jitter(height = 0,width = 0.2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
filter(signature %in% c("SBS38","SBS53","SBS49","SBS7c", "SBS89","SBS3","SBS39")) %>%
ggplot(aes(x = signature, y = exposure, color = sample_id)) +
geom_jitter(height = 0,width = 0.2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
filter(signature %in% c("SBS38","SBS53","SBS49","SBS7c", "SBS89","SBS3","SBS39")) %>%
ggplot(aes(x = signature, y = exposure, color = sample_id)) +
geom_jitter(height = 0,width = 0.2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# 1. List files
files <- list.files("../outputs", pattern = "^sigprofiler_exposures_.*\\.rds$", full.names = TRUE)
analyze_file <- function(file) {
dat <- readRDS(file)
# 2. Convert counts to fractions per row
sig_cols <- grep("^SBS", names(dat), value = TRUE)
dat <- dat %>%
mutate(row_sum = rowSums(across(all_of(sig_cols)))) %>%
mutate(across(all_of(sig_cols), ~ .x / row_sum)) %>%
select(-row_sum)
# add metadata columns
dat <- dat %>%
mutate(file = basename(file),
tumor_type = unique(dat$tissue_type))
# Get which ancestries are present
ancestries <- unique(dat$ancestry)
if (length(ancestries) != 2) {
return(list(results = NULL, raw = dat))
}
# 3. Run wilcox test for each SBS
results <- map_dfr(sig_cols, function(sig) {
#test <- wilcox.test(dat[[sig]] ~ dat$ancestry)
test <- t.test(dat[[sig]] ~ dat$ancestry)
tibble(
signature = sig,
ancestry1 = ancestries[1],
ancestry2 = ancestries[2],
p_value = test$p.value,
mean1 = mean(dat[[sig]][dat$ancestry == ancestries[1]]),
mean2 = mean(dat[[sig]][dat$ancestry == ancestries[2]]),
median1 = median(dat[[sig]][dat$ancestry == ancestries[1]]),
median2 = median(dat[[sig]][dat$ancestry == ancestries[2]]),
file = basename(file),
tumor_type = unique(dat$tissue_type)
)
})
list(results = results, raw = dat)
}
# 4. Apply to all files
all_outputs <- map(files, analyze_file)
# Separate into results and raw data
all_results <- map_dfr(all_outputs, "results")   # comparison results
all_raw     <- map_dfr(all_outputs, "raw")       # per-sample fractions
###########
tcga_test_count <- filter(all_results, !is.na(p_value)) %>% nrow()
# 5. just top hits
top_hits <- all_results %>%
filter(!is.na(p_value), is.finite(p_value)) %>%   # remove NA/NaN p-values
group_by(file) %>%
slice_min(order_by = p_value, n = 1, with_ties = FALSE) %>%
ungroup()
full_join(ancestry_amsd_output, top_hits) %>%
#filter(min_anc_n > 10) %>%
#ggplot(aes(x = -log10(pvalues), y = -log10(p_value), color = comparison, label = tumor_type, size = min_anc_n))+
ggplot(aes(x = -log10(pvalues), y = -log10(p_value), color = comparison, label = tumor_type))+
geom_point()+
geom_label_repel() +
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/tcga_test_count))+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/67))+
xlab("AMSD p-value")+
ylab("Top signature pvalue (wilcox)")
full_join(ancestry_amsd_output, top_hits) %>%
#filter(min_anc_n > 10) %>%
#ggplot(aes(x = -log10(pvalues), y = -log10(p_value), color = comparison, label = tumor_type, size = min_anc_n))+
ggplot(aes(x = -log10(pvalues), y = -log10(p_value), color = comparison, label = tumor_type))+
geom_point()+
geom_label_repel() +
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/tcga_test_count))+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/67))+
xlab("AMSD p-value")+
ylab("Top signature pvalue (t.test)")
# 1. List files
files <- list.files("../outputs", pattern = "^sigprofiler_exposures_.*\\.rds$", full.names = TRUE)
analyze_file <- function(file) {
dat <- readRDS(file)
# 2. Convert counts to fractions per row
sig_cols <- grep("^SBS", names(dat), value = TRUE)
dat <- dat %>%
mutate(row_sum = rowSums(across(all_of(sig_cols)))) %>%
mutate(across(all_of(sig_cols), ~ .x / row_sum)) %>%
select(-row_sum)
# add metadata columns
dat <- dat %>%
mutate(file = basename(file),
tumor_type = unique(dat$tissue_type))
# Get which ancestries are present
ancestries <- unique(dat$ancestry)
if (length(ancestries) != 2) {
return(list(results = NULL, raw = dat))
}
# 3. Run wilcox test for each SBS
results <- map_dfr(sig_cols, function(sig) {
test <- wilcox.test(dat[[sig]] ~ dat$ancestry)
#test <- t.test(dat[[sig]] ~ dat$ancestry)
tibble(
signature = sig,
ancestry1 = ancestries[1],
ancestry2 = ancestries[2],
p_value = test$p.value,
mean1 = mean(dat[[sig]][dat$ancestry == ancestries[1]]),
mean2 = mean(dat[[sig]][dat$ancestry == ancestries[2]]),
median1 = median(dat[[sig]][dat$ancestry == ancestries[1]]),
median2 = median(dat[[sig]][dat$ancestry == ancestries[2]]),
file = basename(file),
tumor_type = unique(dat$tissue_type)
)
})
list(results = results, raw = dat)
}
# 4. Apply to all files
all_outputs <- map(files, analyze_file)
# Separate into results and raw data
all_results <- map_dfr(all_outputs, "results")   # comparison results
all_raw     <- map_dfr(all_outputs, "raw")       # per-sample fractions
###########
tcga_test_count <- filter(all_results, !is.na(p_value)) %>% nrow()
# 5. just top hits
top_hits <- all_results %>%
filter(!is.na(p_value), is.finite(p_value)) %>%   # remove NA/NaN p-values
group_by(file) %>%
slice_min(order_by = p_value, n = 1, with_ties = FALSE) %>%
ungroup()
cosmic_signatures_v3.2
rep(1/96,96)
cosmic_signaturesv3.2_plus <- cosmic_signatures_v3.2
new_row <- rep(1/96,96)
names(new_row) <- "test"
new_row
rbind(cosmic_signaturesv3.2_plus, test = new_row)
rbind(cosmic_signaturesv3.2_plus, test = new_row) %>% tail()
library(tidyverse)
library(mutspecdist)
library(SigProfilerAssignmentR)
library(sigfit)
data("cosmic_signatures_v3.2")
# library(furrr)
# library(future)
setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/AMSD_cancer_mutation_spectra/scripts")
getwd()
library(tidyverse)
library(mutspecdist)
library(SigProfilerAssignmentR)
library(sigfit)
data("cosmic_signatures_v3.2")
# library(furrr)
# library(future)
#setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/AMSD_cancer_mutation_spectra/scripts")
setwd("C:/Users/sfhar/AMSD_cancer_mutation_spectra/scripts")
# load novel signature
read.delim("inputs/Roerink2018_new_sig")
# load novel signature
read.delim("inputs/Roerink2018_new_sig.csv")
# load novel signature
read.delim("../inputs/Roerink2018_new_sig.csv")
# load novel signature
read.delim("../inputs/Roerink2018_new_sig.csv", sep = "'")
# load novel signature
read.delim("../inputs/Roerink2018_new_sig.csv", sep = ",")
# load novel signature
read.delim("../inputs/Roerink2018_new_sig.csv", sep = ",", header = FALSE)
# load novel signature
read.delim("../inputs/Roerink2018_new_sig.csv", sep = ",", header = FALSE)$V2
# load novel signature
novel_sig <- read.delim("../inputs/Roerink2018_new_sig.csv", sep = ",", header = FALSE)$V2
cosmic_signatures_v2
data("cosmic_signatures_v2")
novel_sig <- read.delim("../inputs/Roerink2018_new_sig.csv", sep = ",", header = FALSE)$V2
cosmic_signatures_v3.2
cosmic_signatures_v2
cosine_dist(cosmic_signatures_v3.2[1,],cosmic_signatures_v2[1,])
cosine_dist(cosmic_signatures_v3.2[1,],cosmic_signatures_v2[1,])
cosine_dist(cosmic_signatures_v3.2[5,],cosmic_signatures_v2[5,])
cosmic_signatures_v2_new <- cosmic_signatures_v2
novel_sig <- read.delim("../inputs/Roerink2018_new_sig.csv", sep = ",", header = FALSE)$V2
cosmic_signatures_v2_new <- rbind(cosmic_signatures_v2, SBSX = novel_sig)
cosmic_signatures_v2_new
cosmic_signatures_v2_new %>% tail()
rownames(cosmic_signatures_v2_new)
rep("SBS", 30)
1:30
paste0("SBS", 1:30)
c(paste0("SBS", 1:30), "SBSX")
novel_sig <- read.delim("../inputs/Roerink2018_new_sig.csv", sep = ",", header = FALSE)$V2
cosmic_signatures_v2_new <- rbind(cosmic_signatures_v2, SBSX = novel_sig)
rownames(cosmic_signatures_v2_new) <- c(paste0("SBS", 1:30), "SBSX")
cosmic_signatures_v2_new
tail(cosmic_signatures_v2_new)
# load novel signature
novel_sig <- read.delim("../inputs/Roerink2018_new_sig.csv", sep = ",", header = FALSE)$V2
cosmic_signatures_v2_new <- rbind(cosmic_signatures_v2, SBSX = novel_sig)
rownames(cosmic_signatures_v2_new) <- c(paste0("SBS", 1:30), "SBSX")
tail(cosmic_signatures_v2_new)
#--- helper: convert sigfit-style spectra to SigProfiler SBS96 input
convert_sigfit_to_SigProfiler <- function(sigfit_matrix) {
mat_t <- t(sigfit_matrix)
convert_label <- function(x) {
ref   <- substr(x, 2, 2)
alt   <- substr(x, 6, 6)
left  <- substr(x, 1, 1)
right <- substr(x, 3, 3)
paste0(left, "[", ref, ">", alt, "]", right)
}
rownames(mat_t) <- sapply(rownames(mat_t), convert_label)
sbs96_channels <- c(
"A[C>A]A","A[C>A]C","A[C>A]G","A[C>A]T","A[C>G]A","A[C>G]C","A[C>G]G","A[C>G]T",
"A[C>T]A","A[C>T]C","A[C>T]G","A[C>T]T","A[T>A]A","A[T>A]C","A[T>A]G","A[T>A]T",
"A[T>C]A","A[T>C]C","A[T>C]G","A[T>C]T","A[T>G]A","A[T>G]C","A[T>G]G","A[T>G]T",
"C[C>A]A","C[C>A]C","C[C>A]G","C[C>A]T","C[C>G]A","C[C>G]C","C[C>G]G","C[C>G]T",
"C[C>T]A","C[C>T]C","C[C>T]G","C[C>T]T","C[T>A]A","C[T>A]C","C[T>A]G","C[T>A]T",
"C[T>C]A","C[T>C]C","C[T>C]G","C[T>C]T","C[T>G]A","C[T>G]C","C[T>G]G","C[T>G]T",
"G[C>A]A","G[C>A]C","G[C>A]G","G[C>A]T","G[C>G]A","G[C>G]C","G[C>G]G","G[C>G]T",
"G[C>T]A","G[C>T]C","G[C>T]G","G[C>T]T","G[T>A]A","G[T>A]C","G[T>A]G","G[T>A]T",
"G[T>C]A","G[T>C]C","G[T>C]G","G[T>C]T","G[T>G]A","G[T>G]C","G[T>G]G","G[T>G]T",
"T[C>A]A","T[C>A]C","T[C>A]G","T[C>A]T","T[C>G]A","T[C>G]C","T[C>G]G","T[C>G]T",
"T[C>T]A","T[C>T]C","T[C>T]G","T[C>T]T","T[T>A]A","T[T>A]C","T[T>A]G","T[T>A]T",
"T[T>C]A","T[T>C]C","T[T>C]G","T[T>C]T","T[T>G]A","T[T>G]C","T[T>G]G","T[T>G]T"
)
mat_ordered <- mat_t[sbs96_channels, , drop = FALSE]
df <- as.data.frame(mat_ordered)
df <- cbind(MutationType = rownames(df), df)
rownames(df) <- NULL
return(df)
}
#--- main comparison function
compare_spectra_sigprofiler_top <- function(n_samples = 5,
n_mutations = 50,
sig_probs = c(SBS1 = 0.3, SBS5 = 0.6, SBS18 = 0.1),
additional_sig = "SBS2",
frac_extra = 0.2,
n_sim = 1000,
seed = 123#,
#cosmic_version = 3.3,
#genome_build = "GRCh38"
) {
set.seed(seed)
# --- Simulate spectra ---
no_exp <- simulate_spectra(n_samples, n_mutations, sig_probs, cosmic_signatures_v3.2)
no_exp <- as.data.frame(do.call(rbind, no_exp))
n_extra <- round(n_mutations * frac_extra)   # single number
if (n_extra > 0) {
with_exp <- simulate_spectra(
n_samples, n_mutations, sig_probs, cosmic_signatures_v3.2,
additional_sig,
n_extra = rep(n_extra, n_samples)
)
} else {
# When n_extra = 0, do NOT pass additional_sig or n_extra
with_exp <- simulate_spectra(
n_samples, n_mutations, sig_probs, cosmic_signatures_v3.2
)
}
with_exp <- as.data.frame(do.call(rbind, with_exp))
# --- Convert to SigProfiler input ---
sp_no  <- convert_sigfit_to_SigProfiler(no_exp)
sp_yes <- convert_sigfit_to_SigProfiler(with_exp)
# --- Define output directories ---
out_no  <- paste0("Assignment_no_", seed)
out_yes <- paste0("Assignment_yes_", seed)
# --- Fit with SigProfiler ---
cosmic_fit(
samples = sp_no,
output = out_no,
input_type = "matrix",
context_type = "96",
collapse_to_SBS96 = TRUE#,
#cosmic_version = cosmic_version,
#genome_build = genome_build
)
cosmic_fit(
samples = sp_yes,
output = out_yes,
input_type = "matrix",
context_type = "96",
collapse_to_SBS96 = TRUE#,
#cosmic_version = cosmic_version,
#genome_build = genome_build
)
# --- Read exposures ---
exp_no <- read.delim(file.path(out_no, "Assignment_Solution",
"Activities", "Assignment_Solution_Activities.txt"),
header = TRUE, sep = "\t", check.names = FALSE)
exp_yes <- read.delim(file.path(out_yes, "Assignment_Solution",
"Activities", "Assignment_Solution_Activities.txt"),
header = TRUE, sep = "\t", check.names = FALSE)
exp_no$group <- "A"
exp_yes$group <- "B"
df <- bind_rows(exp_no, exp_yes)
# --- Cleanup output dirs ---
unlink(out_no, recursive = TRUE)
unlink(out_yes, recursive = TRUE)
# --- Statistical tests ---
# results <- df %>%
#   pivot_longer(
#     cols = -c(Samples, group),
#     names_to = "signature",
#     values_to = "exposure"
#   ) %>%
#   group_by(signature) %>%
#   summarise(
#     mean_A = mean(exposure[group == "A"]),
#     mean_B = mean(exposure[group == "B"]),
#     p_ttest = t.test(exposure ~ group)$p.value,
#     p_wilcox = wilcox.test(exposure ~ group)$p.value,
#     .groups = "drop"
#   ) %>%
#   mutate(
#     # Multiple testing corrections
#     p_ttest_Bonf = p.adjust(p_ttest, "bonferroni"),
#     p_ttest_BH   = p.adjust(p_ttest, "BH"),
#     p_wilcox_Bonf = p.adjust(p_wilcox, "bonferroni"),
#     p_wilcox_BH   = p.adjust(p_wilcox, "BH"),
#     n_samples = n_samples,
#     n_mutations = n_mutations,
#     additional_sig = additional_sig,
#     frac_extra = frac_extra,
#     seed = seed
#   ) %>%
#   arrange(p_ttest)
results <- df %>%
pivot_longer(
cols = -c(Samples, group),
names_to = "signature",
values_to = "exposure"
) %>%
group_by(signature) %>%
summarise(
mean_A = mean(exposure[group == "A"]),
mean_B = mean(exposure[group == "B"]),
p_ttest = t.test(exposure ~ group)$p.value,
p_wilcox = wilcox.test(exposure ~ group)$p.value,
present = any(exposure > 0),   # flag signatures with nonzero exposure
.groups = "drop"
) %>%
# keep only present signatures for multiple testing correction
filter(present) %>%
mutate(
n_signatures_present = n(),
p_ttest_Bonf  = p.adjust(p_ttest,  method = "bonferroni"),
p_wilcox_Bonf = p.adjust(p_wilcox, method = "bonferroni"),
n_samples     = n_samples,
n_mutations   = n_mutations,
additional_sig = additional_sig,
frac_extra    = frac_extra,
seed          = seed
) %>%
arrange(p_ttest)
# --- AMSD significance test ---
amsd_p <- amsd(no_exp, with_exp, n_sim = n_sim, seed = seed, mean_or_sum = "sum")$p
results <- results %>%
mutate(amsd_p = amsd_p)
# --- Return only top row (most significant by t-test) ---
top_result <- results %>% slice(1)
return(top_result)
}
# test
# test
compare_spectra_sigprofiler_top(additional_sig = "SBSX")
# test
compare_spectra_sigprofiler_top()
library(tidyverse)
library(mutspecdist)
library(reticulate)
use_python("C:/Users/sfhar/AppData/Local/Programs/Python/Python311/python.exe", required = TRUE)
library(tidyverse)
library(mutspecdist)
library(reticulate)
use_python("C:/Users/sfhar/AppData/Local/Programs/Python/Python313/python.exe", required = TRUE)
library(tidyverse)
library(mutspecdist)
library(reticulate)
use_python("C:/Users/sfhar/AppData/Local/Programs/Python/Python313/python.exe", required = TRUE)
