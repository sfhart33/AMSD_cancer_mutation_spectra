read.delim("csv/mm10.cov1000.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.all.trinuc.txt", stringsAsFactors = FALSE) %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov1000.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.all.trinuc.txt", stringsAsFactors = FALSE) %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") #%>%
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
?column_to_rownames
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov1000.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.all.trinuc.txt", stringsAsFactors = FALSE) %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.all.trinuc.txt", stringsAsFactors = FALSE) #%>%
read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.cov1000.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
read.delim("csv/mm10.all.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t() %>%
plot_spectrum()
cov100 <- read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t()
cov1000 <- read.delim("csv/mm10.cov1000.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t()
cov0 <- read.delim("csv/mm10.all.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t()
cov0
rbind(cov0, cov100, cov1000)
cov100 <- read.delim("csv/mm10.cov100.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t()
cov1000 <- read.delim("csv/mm10.cov1000.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t()
cov0 <- read.delim("csv/mm10.all.trinuc.txt", stringsAsFactors = FALSE, sep = "") %>%
remove_rownames() %>%
column_to_rownames(var = "Substitution") %>%
t()
summary_coverage_trinuc <- rbind(cov0, cov100, cov1000)
rownames(summary_coverage_trinuc) <- c("Full genome", "Coverage 100+ in all samples", "Coverage 1000+ in all samples")
plot_spectrum(summary_coverage_trinuc, pdf_path = "genome_coverage_spectra.pdf")
library(tidyverse)
update.packages(xfun)
install.packages("xfun")
snvs <- readRDS("snvs.rds")
library(tidyverse)
# source("amsd_functions.R")
library(mutspecdist)
library(reticulate)
# use_python("C:/Users/sfhar/AppData/Local/Programs/Python/Python313/python.exe", required = TRUE)
library(SigProfilerAssignmentR)
reticulate::py_config()
?cosmic_fit
system("C:/Users/sfhar/OneDrive/Documents/.virtualenvs/r-reticulate/Scripts/pip show SigProfilerAssignment")
library(tidyverse)
library(BSgenome.Mmusculus.UCSC.mm10)
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
library(GenomicRanges)
library(Biostrings)
library(sigfit)
library(mutspecdist)
library(ggrepel)
# setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/AMSD_cancer_mutation_spectra/scripts")
snvs <- readRDS("../inputs/snvs.rds")
setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/AMSD_cancer_mutation_spectra/scripts")
# setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/AMSD_cancer_mutation_spectra/scripts")
snvs <- readRDS("../inputs/snvs.rds")
head(snvs)
#################################
#### gene annotations
# Load annotation
txdb <- TxDb.Mmusculus.UCSC.mm10.knownGene
genes_gr <- genes(txdb)     # gene bodies
exons_gr <- exons(txdb)     # exons
cds_gr <- cds(txdb)
# Make GRanges from your SNVs
snvs_gr <- snvs %>%
makeGRangesFromDataFrame(seqnames.field = "chrom",
start.field = "pos",
end.field = "pos",
keep.extra.columns = TRUE)
## ---- Gene overlaps ----
hits_gene <- findOverlaps(snvs_gr, genes_gr)
snvs$in_gene <- FALSE
snvs$in_gene[queryHits(hits_gene)] <- TRUE
## ---- Exon overlaps ----
hits_exon <- findOverlaps(snvs_gr, exons_gr)
snvs$in_exon <- FALSE
snvs$in_exon[queryHits(hits_exon)] <- TRUE
## ---- CDS overlaps ----
hits_cds <- findOverlaps(snvs_gr, cds_gr)
snvs$in_cds <- FALSE
snvs$in_cds[queryHits(hits_cds)] <- TRUE
# Quick check
table(snvs$in_gene)
table(snvs$in_exon)
table(snvs$in_cds)
table(snvs$in_gene,snvs$in_exon)
table(snvs$in_gene,snvs$in_cds)
head(snvs)
##############################
# Trinucleotides
snvs_all <- snvs %>%
mutate(trinuc = as.character(getSeq(BSgenome.Mmusculus.UCSC.mm10,
chrom,
start = as.numeric(pos)-1,
end =  as.numeric(pos) + 1))) %>%
mutate(
is_purine = ref %in% c("A", "G"),
trinuc_std = if_else(is_purine,
as.character(reverseComplement(DNAStringSet(trinuc))),
trinuc),
ref_std = if_else(is_purine,
as.character(reverseComplement(DNAStringSet(ref))),
ref),
alt_std = if_else(is_purine,
as.character(reverseComplement(DNAStringSet(alt))),
alt),
trinuc_mut = paste0(trinuc_std, ">", substr(trinuc_std, 1, 1), alt_std, substr(trinuc_std, 3, 3))
)
##############################
# Tally up and put in order
make_snv_matrix <- function(snvs,
sample_prefix = NULL,
filter_col = NULL,
filter_val = TRUE,
rowsum = TRUE) {
df <- snvs
# optional: filter by sample name prefix
if (!is.null(sample_prefix)) {
df <- df %>%
filter(startsWith(sample, sample_prefix))
}
# optional: filter by annotation column (e.g. in_exon, in_gene, in_cds)
if (!is.null(filter_col)) {
df <- df %>%
filter(.data[[filter_col]] == filter_val)
}
# tally and order trinucleotide mutations
output <- df %>%
count(sample, trinuc_mut, name = "n_snvs") %>%
separate(trinuc_mut, into = c("trinuc", "mut"), sep = ">") %>%
mutate(
first = substr(trinuc, 1, 1),
middle = substr(trinuc, 2, 2),
middle2 = substr(mut, 2, 2),
third = substr(trinuc, 3, 3)
) %>%
arrange(middle, middle2, first, third) %>%
mutate(trinuc_mut = paste0(trinuc, ">", mut)) %>%
dplyr::select(-first, -middle, -third, -trinuc, -mut, -middle2) %>%
pivot_wider(
names_from = trinuc_mut,
values_from = n_snvs,
values_fill = 0
) %>%
column_to_rownames("sample")
output/rowSums(output)
if (rowsum == TRUE) {
output/rowSums(output)
} else {
output
}
}
spon_all <- make_snv_matrix(snvs_all, sample_prefix = "LIVER_SPON")
spon_gene <- make_snv_matrix(snvs_all, sample_prefix = "LIVER_SPON", filter_col = "in_gene")
spon_nongene <- make_snv_matrix(snvs_all, sample_prefix = "LIVER_SPON", filter_col = "in_gene",filter_val = FALSE)
spon_nonexon <- make_snv_matrix(snvs_all, sample_prefix = "LIVER_SPON", filter_col = "in_exon",filter_val = FALSE)
ox_all <- make_snv_matrix(snvs_all, sample_prefix = "LIVER_OX")
ox_gene <- make_snv_matrix(snvs_all, sample_prefix = "LIVER_OX", filter_col = "in_gene")
ox_nongene <- make_snv_matrix(snvs_all, sample_prefix = "LIVER_OX", filter_col = "in_gene",filter_val = FALSE)
ox_nonexon <- make_snv_matrix(snvs_all, sample_prefix = "LIVER_OX", filter_col = "in_exon",filter_val = FALSE)
plot_spectrum(colSums(spon_nongene))
plot_spectrum(colSums(ox_nongene))
amsd_all <- amsd(spon_all,
ox_all,
mean_or_sum = "mean",
n_sim = 10000,
seed = 1234)
amsd_gene <- amsd(spon_gene,
ox_gene,
mean_or_sum = "mean",
n_sim = 10000,
seed = 1234)
amsd_nongene <- amsd(spon_nongene,
ox_nongene,
mean_or_sum = "mean",
n_sim = 10000,
seed = 1234)
amsd_nonexon <- amsd(spon_nonexon,
ox_nonexon,
mean_or_sum = "mean",
n_sim = 10000,
seed = 1234)
plot_amsd_histogram(amsd_all)
amsd_nongene$pvalue
amsd_nongene$pv.alue
View(amsd_nonexon)
amsd_nongene$p
amsd_gene$p
amsd_gene$cosine
amsd_nongene$cosine
amsd_all$p
amsd_all$cosine
library(tidyverse)
library(ggrepel)
library(sigfit)
# load data
# setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/AMSD_cancer_mutation_spectra/scripts")
mouse_amsd_output <- readRDS("../outputs/mouse_amsd_output.rds")
mouse_amsd_output2 <- readRDS("../outputs/mouse_amsd_output_unweighted.rds")
mouse_amsd_output$pvalues2 <- mouse_amsd_output2$pvalues
# perms <- readRDS("../outputs/mouse_amsd_perms.rds")
# mexposuresig <- readRDS("../inputs/mouse_exposuresig.rds")
# mexposure <- readRDS("../inputs/mouse_exposure.rds")
# mouse_carcinogen_counts <- readRDS("../inputs/mouse_carcinogen_spectra.rds") # counts
# mouse_carcinogen_spectra <- mouse_carcinogen_counts/rowSums(mouse_carcinogen_counts) # spectra
# load data
ancestry_amsd_output <- readRDS("../outputs/ancestry_amsd_output.rds")
ancestry_amsd_output2 <- readRDS("../outputs/ancestry_amsd_output_unweighted.rds")
ancestry_amsd_output$pvalues2 <- ancestry_amsd_output2$pvalues
anc_spectra <- readRDS("../outputs/ancestry_spectra.rds")
perms <- readRDS("../outputs/ancestry_amsd_perms.rds")
perms2 <- readRDS("../outputs/ancestry_amsd_perms_unweighted.rds")
anc_plot <- ancestry_amsd_output %>%
ggplot(aes(-log10(pvalues),-log10(pvalues2), color = comparison, label = tumor_type)) +
geom_point() +
geom_smooth(method = "lm",
inherit.aes = FALSE,
aes(-log10(pvalues),
-log10(pvalues2)),
color = "black")+
geom_label_repel()+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/67))+
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/67))+
labs(x = "-log10(AMSD p-value): all samples weighted equally",
y = "-log10(AMSD p-value):\nsamples weighted by mutation count")+
theme_classic()
mouse_plot <- mouse_amsd_output %>%
ggplot(aes(-log10(pvalues),-log10(pvalues2), color = tissue, label = exposure)) +
geom_point() +
geom_smooth(method = "lm",
inherit.aes = FALSE,
aes(-log10(pvalues),
-log10(pvalues2)),
color = "black")+
geom_label_repel()+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/67))+
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/67))+
labs(x = "-log10(AMSD p-value): all samples weighted equally",
y = "-log10(AMSD p-value):\nsamples weighted by mutation count")+
theme_classic()
bothplots <- ggarrange(mouse_plot, anc_plot, nrow=2, ncol=1,  labels = c("A","B"))
libaryar(ggpubr)
library(tidyverse)
library(ggpubr)
library(ggrepel)
library(sigfit)
# load data
# setwd("\\\\gs-ddn2/gs-vol1/home/sfhart/github/AMSD_cancer_mutation_spectra/scripts")
mouse_amsd_output <- readRDS("../outputs/mouse_amsd_output.rds")
mouse_amsd_output2 <- readRDS("../outputs/mouse_amsd_output_unweighted.rds")
mouse_amsd_output$pvalues2 <- mouse_amsd_output2$pvalues
# perms <- readRDS("../outputs/mouse_amsd_perms.rds")
# mexposuresig <- readRDS("../inputs/mouse_exposuresig.rds")
# mexposure <- readRDS("../inputs/mouse_exposure.rds")
# mouse_carcinogen_counts <- readRDS("../inputs/mouse_carcinogen_spectra.rds") # counts
# mouse_carcinogen_spectra <- mouse_carcinogen_counts/rowSums(mouse_carcinogen_counts) # spectra
# load data
ancestry_amsd_output <- readRDS("../outputs/ancestry_amsd_output.rds")
ancestry_amsd_output2 <- readRDS("../outputs/ancestry_amsd_output_unweighted.rds")
ancestry_amsd_output$pvalues2 <- ancestry_amsd_output2$pvalues
anc_spectra <- readRDS("../outputs/ancestry_spectra.rds")
perms <- readRDS("../outputs/ancestry_amsd_perms.rds")
perms2 <- readRDS("../outputs/ancestry_amsd_perms_unweighted.rds")
anc_plot <- ancestry_amsd_output %>%
ggplot(aes(-log10(pvalues),-log10(pvalues2), color = comparison, label = tumor_type)) +
geom_point() +
geom_smooth(method = "lm",
inherit.aes = FALSE,
aes(-log10(pvalues),
-log10(pvalues2)),
color = "black")+
geom_label_repel()+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/67))+
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/67))+
labs(x = "-log10(AMSD p-value): all samples weighted equally",
y = "-log10(AMSD p-value):\nsamples weighted by mutation count")+
theme_classic()
mouse_plot <- mouse_amsd_output %>%
ggplot(aes(-log10(pvalues),-log10(pvalues2), color = tissue, label = exposure)) +
geom_point() +
geom_smooth(method = "lm",
inherit.aes = FALSE,
aes(-log10(pvalues),
-log10(pvalues2)),
color = "black")+
geom_label_repel()+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/67))+
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/67))+
labs(x = "-log10(AMSD p-value): all samples weighted equally",
y = "-log10(AMSD p-value):\nsamples weighted by mutation count")+
theme_classic()
bothplots <- ggarrange(mouse_plot, anc_plot, nrow=2, ncol=1,  labels = c("A","B"))
bothplots
source("//gs-ddn2/gs-vol1/home/sfhart/github/AMSD_cancer_mutation_spectra/scripts/amsd_weighted_v_unweighted.R", echo = TRUE)
anc_plot <- ancestry_amsd_output %>%
ggplot(aes(-log10(pvalues),-log10(pvalues2), color = comparison, label = tumor_type)) +
geom_point() +
geom_smooth(method = "lm",
inherit.aes = FALSE,
aes(-log10(pvalues),
-log10(pvalues2)),
color = "black")+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/67))+
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/67))+
geom_label_repel()+
labs(x = "-log10(AMSD p-value): all samples weighted equally",
y = "-log10(AMSD p-value):\nsamples weighted by mutation count")+
theme_classic()
mouse_plot <- mouse_amsd_output %>%
ggplot(aes(-log10(pvalues),-log10(pvalues2), color = tissue, label = exposure)) +
geom_point() +
geom_smooth(method = "lm",
inherit.aes = FALSE,
aes(-log10(pvalues),
-log10(pvalues2)),
color = "black")+
geom_label_repel()+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/67))+
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/67))+
geom_label_repel()+
labs(x = "-log10(AMSD p-value): all samples weighted equally",
y = "-log10(AMSD p-value):\nsamples weighted by mutation count")+
theme_classic()
bothplots <- ggarrange(mouse_plot, anc_plot, nrow=2, ncol=1,  labels = c("A","B"))
bothplots
ggsave("../outputs/amsd_weighted_v_unweighted.png",
plot = bothplots,
width = 7,
height = 8,
units = "in"
)
mouse_plot <- mouse_amsd_output %>%
ggplot(aes(-log10(pvalues),-log10(pvalues2), color = tissue, label = exposure)) +
geom_point() +
geom_smooth(method = "lm",
inherit.aes = FALSE,
aes(-log10(pvalues),
-log10(pvalues2)),
color = "black")+
geom_label_repel(max.overlaps = 50)+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/67))+
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/67))+
geom_label_repel()+
labs(x = "-log10(AMSD p-value): all samples weighted equally",
y = "-log10(AMSD p-value):\nsamples weighted by mutation count")+
theme_classic()
bothplots <- ggarrange(mouse_plot, anc_plot, nrow=2, ncol=1,  labels = c("A","B"))
bothplots
mouse_plot <- mouse_amsd_output %>%
ggplot(aes(-log10(pvalues),-log10(pvalues2), color = tissue, label = exposure)) +
geom_point() +
geom_smooth(method = "lm",
inherit.aes = FALSE,
aes(-log10(pvalues),
-log10(pvalues2)),
color = "black")+
geom_label_repel(max.overlaps = 10)+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/67))+
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/67))+
geom_label_repel()+
labs(x = "-log10(AMSD p-value): all samples weighted equally",
y = "-log10(AMSD p-value):\nsamples weighted by mutation count")+
theme_classic()
bothplots <- ggarrange(mouse_plot, anc_plot, nrow=2, ncol=1,  labels = c("A","B"))
bothplots
mouse_plot <- mouse_amsd_output %>%
ggplot(aes(-log10(pvalues),-log10(pvalues2), color = tissue, label = exposure)) +
geom_point() +
geom_smooth(method = "lm",
inherit.aes = FALSE,
aes(-log10(pvalues),
-log10(pvalues2)),
color = "black")+
geom_label_repel(max.overlaps = 5)+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/67))+
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/67))+
geom_label_repel()+
labs(x = "-log10(AMSD p-value): all samples weighted equally",
y = "-log10(AMSD p-value):\nsamples weighted by mutation count")+
theme_classic()
bothplots <- ggarrange(mouse_plot, anc_plot, nrow=2, ncol=1,  labels = c("A","B"))
bothplots
mouse_plot <- mouse_amsd_output %>%
ggplot(aes(-log10(pvalues),-log10(pvalues2), color = tissue, label = exposure)) +
geom_point() +
geom_smooth(method = "lm",
inherit.aes = FALSE,
aes(-log10(pvalues),
-log10(pvalues2)),
color = "black")+
geom_label_repel(max.overlaps = 1)+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/67))+
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/67))+
geom_label_repel()+
labs(x = "-log10(AMSD p-value): all samples weighted equally",
y = "-log10(AMSD p-value):\nsamples weighted by mutation count")+
theme_classic()
bothplots <- ggarrange(mouse_plot, anc_plot, nrow=2, ncol=1,  labels = c("A","B"))
bothplots
ggsave("../outputs/amsd_weighted_v_unweighted.png",
plot = bothplots,
width = 7,
height = 8,
units = "in"
)
?geom_label_repel
# library(ggtext)
# library(patchwork)
#source("amsd_weighted_v_unweighted.R")
source("amsd_vs_sigvar.R")
############### MICE
# load data
mouse_carcinogen_counts <- readRDS("../inputs/mouse_carcinogen_spectra.rds") # counts
mouse_carcinogen_spectra <- mouse_carcinogen_counts/rowSums(mouse_carcinogen_counts) # spectra
# list of samples and attributes
sample_table <- mouse_carcinogen_spectra %>%
rownames_to_column(var = "label") %>%
select(label) %>%
separate(label, c("tissue","rest"), sep = "_", extra = "merge", remove = FALSE) %>%
separate(rest,
into = c("exposure", "rep"),
sep = "_(?=\\d+$)", # Regex to split based on underscores near the end
extra = "merge",            # Handle extra columns by merging into one
fill = "right")             # Handle missing parts gracefully
