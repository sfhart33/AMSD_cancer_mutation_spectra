geom_label_repel() +
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/test_count))+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/29))+
xlab("AMSD p-value")+
ylab("Top signature pvaue (ttest)")
merged_amsdsig %>%
ggplot(aes(x = -log10(pvalues), y = -log10(p_wilcox), color = tissue, label = exposure))+
geom_point()+
geom_label_repel() +
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/test_count))+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/29))+
xlab("AMSD p-value")+
ylab("Top signature pvaue (wilcox rank sum)")
if (length(ancestries) != 2) {
return(list(results = NULL, raw = dat))
}
# 3. Run wilcox test for each SBS
results <- map_dfr(sig_cols, function(sig) {
test <- wilcox.test(dat[[sig]] ~ dat$ancestry)
tibble(
signature = sig,
ancestry1 = ancestries[1],
ancestry2 = ancestries[2],
p_value = test$p.value,
mean1 = mean(dat[[sig]][dat$ancestry == ancestries[1]]),
mean2 = mean(dat[[sig]][dat$ancestry == ancestries[2]]),
median1 = median(dat[[sig]][dat$ancestry == ancestries[1]]),
median2 = median(dat[[sig]][dat$ancestry == ancestries[2]]),
file = basename(file),
tumor_type = unique(dat$tissue_type)
)
})
# 1. List files
files <- list.files("../outputs", pattern = "^sigprofiler_exposures_.*\\.rds$", full.names = TRUE)
analyze_file <- function(file) {
dat <- readRDS(file)
# 2. Convert counts to fractions per row
sig_cols <- grep("^SBS", names(dat), value = TRUE)
dat <- dat %>%
mutate(row_sum = rowSums(across(all_of(sig_cols)))) %>%
mutate(across(all_of(sig_cols), ~ .x / row_sum)) %>%
select(-row_sum)
# add metadata columns
dat <- dat %>%
mutate(file = basename(file),
tumor_type = unique(dat$tissue_type))
# Get which ancestries are present
ancestries <- unique(dat$ancestry)
if (length(ancestries) != 2) {
return(list(results = NULL, raw = dat))
}
# 3. Run wilcox test for each SBS
results <- map_dfr(sig_cols, function(sig) {
test <- wilcox.test(dat[[sig]] ~ dat$ancestry)
tibble(
signature = sig,
ancestry1 = ancestries[1],
ancestry2 = ancestries[2],
p_value = test$p.value,
mean1 = mean(dat[[sig]][dat$ancestry == ancestries[1]]),
mean2 = mean(dat[[sig]][dat$ancestry == ancestries[2]]),
median1 = median(dat[[sig]][dat$ancestry == ancestries[1]]),
median2 = median(dat[[sig]][dat$ancestry == ancestries[2]]),
file = basename(file),
tumor_type = unique(dat$tissue_type)
)
})
list(results = results, raw = dat)
}
# 4. Apply to all files
all_outputs <- map(files, analyze_file)
# Separate into results and raw data
all_results <- map_dfr(all_outputs, "results")   # comparison results
all_raw     <- map_dfr(all_outputs, "raw")       # per-sample fractions
###########
tcga_test_count <- filter(all_results, !is.na(p_value)) %>% nrow()
# 5. just top hits
top_hits <- all_results %>%
filter(!is.na(p_value), is.finite(p_value)) %>%   # remove NA/NaN p-values
group_by(file) %>%
slice_min(order_by = p_value, n = 1, with_ties = FALSE) %>%
ungroup()
full_join(ancestry_amsd_output, top_hits) %>%
#filter(min_anc_n > 10) %>%
#ggplot(aes(x = -log10(pvalues), y = -log10(p_value), color = comparison, label = tumor_type, size = min_anc_n))+
ggplot(aes(x = -log10(pvalues), y = -log10(p_value), color = comparison, label = tumor_type))+
geom_point()+
geom_label_repel() +
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/tcga_test_count))+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/67))+
xlab("AMSD p-value")+
ylab("Top signature pvalue (wilcox)")
all_raw  %>%
filter(tumor_type == "KIRP") %>%
select(-file) %>%
unique() %>%
ggplot(aes(x=ancestry,y=SBS85, color = tumor_type))+
geom_boxplot(outliers = FALSE)+
geom_jitter(height = 0, width = 0.2, alpha = 0.6)
all_raw  %>%
select(-file) %>%
unique() %>%
filter(tumor_type == "SARC") %>%
ggplot(aes(x=ancestry,y=SBS54, color = tumor_type))+
geom_boxplot(outliers = FALSE)+
geom_jitter(height = 0, width = 0.2, alpha = 0.6)
plot_sig_volcano <- function(anc1, anc2, tumor){
p <- filter(ancestry_amsd_output,
tumor_type == tumor,
ancestry1 == anc1,
ancestry2 == anc2) %>%
pull(pvalues)
subset_tcga <- all_results %>%
mutate(ancestries = paste0(ancestry1, "_v_", ancestry2)) %>%
filter(tumor_type == tumor,
ancestries == paste0(anc1, "_v_", anc2),
!is.na(p_value))
subset_tcga %>%
ggplot(aes(x = (mean1 - mean2), y = -log10(p_value), label = signature))+
geom_point()+
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/nrow(subset_tcga)))+
geom_hline(yintercept = -log10(0.05/tcga_test_count))+
geom_label_repel()+
labs(title = paste0(tumor,": ",anc1, " vs ", anc2, ", AMSD pvalue = ", p),
x = "Difference in means")
}
plot_sig_volcano("afr", "eas","LUAD")
ancestry_amsd_perms <- readRDS(file = "ancestry_amsd_perms.rds")
# load permutations
ancestry_amsd_perms <- readRDS(file = "../otuputs/ancestry_amsd_perms.rds")
# load permutations
ancestry_amsd_perms <- readRDS(file = "../outputs/ancestry_amsd_perms.rds")
ancestry_amsd_perms
ggplot(ancestry_amsd_perms, aes(SARC.eas_eur))+ geom_histogram()
ggplot(ancestry_amsd_perms, aes(SARC.eas_eur))+ geom_histogram()+labs(title = "SARC: eas vs eur", x = "cosine distance",y = "permutation count")
ggplot(ancestry_amsd_perms, aes(SARC.eas_eur))+ geom_histogram()+labs(title = "SARC: eas vs eur", x = "cosine distance",y = "permutation count")
ggplot(ancestry_amsd_perms, aes(KIRP.eas_eur))+ geom_histogram()+labs(title = "SARC: eas vs eur", x = "cosine distance",y = "permutation count")
ancestry_amsd_output
ggplot(ancestry_amsd_perms, aes(SARC.eas_eur))+
geom_histogram()+
geom_vline(xintercept = ancestry_amsd_output[53,"cosines"])+
labs(title = "SARC: eas vs eur", x = "cosine distance",y = "permutation count")
ggplot(ancestry_amsd_perms, aes(KIRP.eas_eur))+
geom_histogram()+
geom_vline(xintercept = ancestry_amsd_output[26,"cosines"])+
labs(title = "SARC: eas vs eur", x = "cosine distance",y = "permutation count")
ggplot(ancestry_amsd_perms, aes(KIRP.eas_eur))+
geom_histogram()+
geom_vline(xintercept = ancestry_amsd_output[26,"cosines"])+
labs(title = "KIRP: eas vs eur", x = "cosine distance",y = "permutation count")
ggplot(ancestry_amsd_perms, aes(OV.eas_eur))+
geom_histogram()+
geom_vline(xintercept = ancestry_amsd_output[42,"cosines"])+
labs(title = "OV: eas vs eur", x = "cosine distance",y = "permutation count")
ggplot(ancestry_amsd_perms, aes(LUAD.afr_eas))+
geom_histogram()+
geom_vline(xintercept = ancestry_amsd_output[34,"cosines"])+
labs(title = "LUAD: afr vs eas", x = "cosine distance",y = "permutation count")
ggplot(ancestry_amsd_perms, aes(UCEC.eas_eur))+
geom_histogram()+
geom_vline(xintercept = ancestry_amsd_output[66,"cosines"])+
labs(title = "UCEC: eas vs eur", x = "cosine distance",y = "permutation count")
all_raw  %>%
select(-file) %>%
unique() %>%
filter(tumor_type == "OV") %>%
ggplot(aes(x=ancestry,y=SBS38, color = tumor_type))+
geom_boxplot(outliers = FALSE)+
geom_jitter(height = 0, width = 0.2, alpha = 0.6)
all_raw  %>%
select(-file) %>%
unique() %>%
filter(tumor_type == "OV") #%>%
all_raw  %>%
select(-file) %>%
unique() %>%
filter(tumor_type == "OV", ancestry == "eas") #%>%
all_raw  %>%
select(-file) %>%
unique() %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
distinct() %>%
pivot_longer(
cols = starts_with("SBS"),   # all columns that start with "SBS"
names_to = "signature",
values_to = "exposure"
)
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
)
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
ggplot(aes(x = signature, y = exposure)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
ggplot(aes(x = signature, y = exposure)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
ggplot(aes(x = signature, y = exposure)) +
geom_jitter() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
ggplot(aes(x = signature, y = exposure)) +
geom_jitter(height = 0) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
ggplot(aes(x = signature, y = exposure)) +
geom_jitter(height = 0,width = 0.2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
ggplot(aes(x = signature, y = exposure)) +
#geom_jitter(height = 0,width = 0.2) +
geom_dotplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
ggplot(aes(x = signature, y = exposure)) +
#geom_jitter(height = 0,width = 0.2) +
geom_dotplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
ggplot(aes(x = signature, y = exposure)) +
geom_jitter(height = 0,width = 0.2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
ggplot(aes(x = signature, y = exposure, color = sample_id)) +
geom_jitter(height = 0,width = 0.2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
filter(signature %in% c("SBS38","SBS53","SBS49","SBS7c")) %>%
ggplot(aes(x = signature, y = exposure, color = sample_id)) +
geom_jitter(height = 0,width = 0.2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
filter(signature %in% c("SBS38","SBS53","SBS49","SBS7c", "SBS89","SBS3","SBS39")) %>%
ggplot(aes(x = signature, y = exposure, color = sample_id)) +
geom_jitter(height = 0,width = 0.2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
all_raw %>%
filter(tumor_type == "OV", ancestry == "eas") %>%
select(-file) %>%
distinct() %>%
# keep only SBS columns that are not all zeros
select(where(~ !all(. == 0))) %>%
pivot_longer(
cols = starts_with("SBS"),
names_to = "signature",
values_to = "exposure"
) %>%
filter(signature %in% c("SBS38","SBS53","SBS49","SBS7c", "SBS89","SBS3","SBS39")) %>%
ggplot(aes(x = signature, y = exposure, color = sample_id)) +
geom_jitter(height = 0,width = 0.2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# 1. List files
files <- list.files("../outputs", pattern = "^sigprofiler_exposures_.*\\.rds$", full.names = TRUE)
analyze_file <- function(file) {
dat <- readRDS(file)
# 2. Convert counts to fractions per row
sig_cols <- grep("^SBS", names(dat), value = TRUE)
dat <- dat %>%
mutate(row_sum = rowSums(across(all_of(sig_cols)))) %>%
mutate(across(all_of(sig_cols), ~ .x / row_sum)) %>%
select(-row_sum)
# add metadata columns
dat <- dat %>%
mutate(file = basename(file),
tumor_type = unique(dat$tissue_type))
# Get which ancestries are present
ancestries <- unique(dat$ancestry)
if (length(ancestries) != 2) {
return(list(results = NULL, raw = dat))
}
# 3. Run wilcox test for each SBS
results <- map_dfr(sig_cols, function(sig) {
#test <- wilcox.test(dat[[sig]] ~ dat$ancestry)
test <- t.test(dat[[sig]] ~ dat$ancestry)
tibble(
signature = sig,
ancestry1 = ancestries[1],
ancestry2 = ancestries[2],
p_value = test$p.value,
mean1 = mean(dat[[sig]][dat$ancestry == ancestries[1]]),
mean2 = mean(dat[[sig]][dat$ancestry == ancestries[2]]),
median1 = median(dat[[sig]][dat$ancestry == ancestries[1]]),
median2 = median(dat[[sig]][dat$ancestry == ancestries[2]]),
file = basename(file),
tumor_type = unique(dat$tissue_type)
)
})
list(results = results, raw = dat)
}
# 4. Apply to all files
all_outputs <- map(files, analyze_file)
# Separate into results and raw data
all_results <- map_dfr(all_outputs, "results")   # comparison results
all_raw     <- map_dfr(all_outputs, "raw")       # per-sample fractions
###########
tcga_test_count <- filter(all_results, !is.na(p_value)) %>% nrow()
# 5. just top hits
top_hits <- all_results %>%
filter(!is.na(p_value), is.finite(p_value)) %>%   # remove NA/NaN p-values
group_by(file) %>%
slice_min(order_by = p_value, n = 1, with_ties = FALSE) %>%
ungroup()
full_join(ancestry_amsd_output, top_hits) %>%
#filter(min_anc_n > 10) %>%
#ggplot(aes(x = -log10(pvalues), y = -log10(p_value), color = comparison, label = tumor_type, size = min_anc_n))+
ggplot(aes(x = -log10(pvalues), y = -log10(p_value), color = comparison, label = tumor_type))+
geom_point()+
geom_label_repel() +
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/tcga_test_count))+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/67))+
xlab("AMSD p-value")+
ylab("Top signature pvalue (wilcox)")
full_join(ancestry_amsd_output, top_hits) %>%
#filter(min_anc_n > 10) %>%
#ggplot(aes(x = -log10(pvalues), y = -log10(p_value), color = comparison, label = tumor_type, size = min_anc_n))+
ggplot(aes(x = -log10(pvalues), y = -log10(p_value), color = comparison, label = tumor_type))+
geom_point()+
geom_label_repel() +
geom_hline(yintercept = -log10(0.05))+
geom_hline(yintercept = -log10(0.05/tcga_test_count))+
geom_vline(xintercept = -log10(0.05))+
geom_vline(xintercept = -log10(0.05/67))+
xlab("AMSD p-value")+
ylab("Top signature pvalue (t.test)")
# 1. List files
files <- list.files("../outputs", pattern = "^sigprofiler_exposures_.*\\.rds$", full.names = TRUE)
analyze_file <- function(file) {
dat <- readRDS(file)
# 2. Convert counts to fractions per row
sig_cols <- grep("^SBS", names(dat), value = TRUE)
dat <- dat %>%
mutate(row_sum = rowSums(across(all_of(sig_cols)))) %>%
mutate(across(all_of(sig_cols), ~ .x / row_sum)) %>%
select(-row_sum)
# add metadata columns
dat <- dat %>%
mutate(file = basename(file),
tumor_type = unique(dat$tissue_type))
# Get which ancestries are present
ancestries <- unique(dat$ancestry)
if (length(ancestries) != 2) {
return(list(results = NULL, raw = dat))
}
# 3. Run wilcox test for each SBS
results <- map_dfr(sig_cols, function(sig) {
test <- wilcox.test(dat[[sig]] ~ dat$ancestry)
#test <- t.test(dat[[sig]] ~ dat$ancestry)
tibble(
signature = sig,
ancestry1 = ancestries[1],
ancestry2 = ancestries[2],
p_value = test$p.value,
mean1 = mean(dat[[sig]][dat$ancestry == ancestries[1]]),
mean2 = mean(dat[[sig]][dat$ancestry == ancestries[2]]),
median1 = median(dat[[sig]][dat$ancestry == ancestries[1]]),
median2 = median(dat[[sig]][dat$ancestry == ancestries[2]]),
file = basename(file),
tumor_type = unique(dat$tissue_type)
)
})
list(results = results, raw = dat)
}
# 4. Apply to all files
all_outputs <- map(files, analyze_file)
# Separate into results and raw data
all_results <- map_dfr(all_outputs, "results")   # comparison results
all_raw     <- map_dfr(all_outputs, "raw")       # per-sample fractions
###########
tcga_test_count <- filter(all_results, !is.na(p_value)) %>% nrow()
# 5. just top hits
top_hits <- all_results %>%
filter(!is.na(p_value), is.finite(p_value)) %>%   # remove NA/NaN p-values
group_by(file) %>%
slice_min(order_by = p_value, n = 1, with_ties = FALSE) %>%
ungroup()
cosmic_signatures_v3.2
rep(1/96,96)
cosmic_signaturesv3.2_plus <- cosmic_signatures_v3.2
new_row <- rep(1/96,96)
names(new_row) <- "test"
new_row
rbind(cosmic_signaturesv3.2_plus, test = new_row)
rbind(cosmic_signaturesv3.2_plus, test = new_row) %>% tail()
