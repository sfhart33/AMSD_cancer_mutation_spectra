ggplot(aes(total_vaf))+geom_histogram()
split_tables_vaf$`JAX_P0_L1-08`$unique %>%
filter(White_blood_cells_alt > 0,
Hepatocytes_alt == 0,
Endothelium_alt > 0,
Muscle_cells_alt > 0) %>%
ggplot(aes(total_vaf))+geom_histogram()
split_tables_vaf$`JAX_P0_L1-08`$unique %>%
filter(White_blood_cells_alt > 0,
Hepatocytes_alt == 0,
Hepatocytes_tot > 10,
Endothelium_alt > 0,
Muscle_cells_alt > 0) %>%
ggplot(aes(total_vaf))+geom_histogram()
split_tables_vaf$`JAX_P0_L1-08`$unique %>%
filter(White_blood_cells_alt > 0,
Hepatocytes_alt == 0,
#Hepatocytes_tot > 10,
Endothelium_alt > 0,
Muscle_cells_alt > 0) %>%
ggplot(aes(total_vaf))+geom_histogram()
split_tables_vaf$`JAX_P0_L1-08`$unique %>%
filter(White_blood_cells_alt > 0,
Hepatocytes_alt == 0,
Hepatocytes_tot == 0,
Endothelium_alt == 0,
Muscle_cells_alt > 0) %>%
ggplot(aes(total_vaf))+geom_histogram()
split_tables_vaf$`JAX_P0_L1-08`$unique %>%
filter(White_blood_cells_alt > 0,
Hepatocytes_alt == 0,
#Hepatocytes_tot == 0,
Endothelium_alt == 0,
Muscle_cells_alt > 0) %>%
ggplot(aes(total_vaf))+geom_histogram()
library(reticulate)
library(reticulate)
library(tidyverse)
library(sigfit)
library(ggrepel)
library(parallel)
data("cosmic_signatures_v3.2")
library(mutspecdist)
library(reticulate)
install.packages("reticulate")
library(reticulate)
py_config()
library(devtools)
install_github("AlexandrovLab/SigProfilerAssignmentR")
library(SigProfilerAssignmentR)
?cosmic_fit
no_exposure_test
ibrary(tidyverse)
ibrary(tidyverse)
library(tidyverse)
library(sigfit)
library(ggrepel)
library(parallel)
data("cosmic_signatures_v3.2")
library(mutspecdist)
library(SigProfilerAssignmentR)
n_samples = 5
n_mutations = 2500
sig_probs <- c(SBS1 = 0.3, SBS5 = 0.6, SBS18 = 0.1)
signatures <- cosmic_signatures_v3.2
additional_sig <- "SBS2"
n_extra = rep(n_mutations*0.02,n_samples)
n_sim = 1000
seed = 123
#set.seed(123)
# ss <- c("SBS2","SBS40") # spiky and flat signatures to test
# ns <- c(5,25,125,625) # samples per exposure to test
# ms <- c(50,2500) # mutations per sample to test (approx WES and WGS)
# fs <- c(0.2,0.1,0.05,0.02)# extra mutations - fraction of total mutations
# xs <- 1:100 # replicates to test each parameter set
# Run on a base set, then with exposures
no_exposure_test <- simulate_spectra(n_samples = n_samples,
n_mutations = n_mutations,
sig_probs = sig_probs,
signatures = signatures)
no_exposure_test <- as.data.frame(do.call(rbind, no_exposure_test))
no_exposure_test2 <- no_exposure_test/rowSums(no_exposure_test) # convert to mutaion fractions
with_exposure_test <- simulate_spectra(n_samples = n_samples,
n_mutations = n_mutations,
sig_probs = sig_probs,
signatures = signatures,
additional_sig = additional_sig,
n_extra = n_extra)
with_exposure_test <- as.data.frame(do.call(rbind, with_exposure_test))
with_exposure_test2 <- with_exposure_test/rowSums(with_exposure_test) # convert to mutaion fractions
amsd(no_exposure_test, with_exposure_test, n_sim = n_sim, seed = seed, 'mean_or_sum' = 'sum')$p
# amsd(no_exposure_test2, with_exposure_test2, n_sim = n_sim, seed = seed)
no_exposure_test
convert_sigfit_to_SigProfiler <- function(sigfit_matrix) {
library(SigProfilerAssignmentR)
# 1. Transpose so rows = mutation types, cols = samples
mat_t <- t(sigfit_matrix)
# 2. Convert mutation labels from e.g. "ACA>AAA" → "A[C>A]A"
convert_label <- function(x) {
ref <- substr(x, 2, 2)     # central base (ref)
alt <- substr(x, 6, 6)     # mutated base
left <- substr(x, 1, 1)    # left context
right <- substr(x, 3, 3)   # right context
paste0(left, "[", ref, ">", alt, "]", right)
}
rownames(mat_t) <- sapply(rownames(mat_t), convert_label)
# 3. Reorder to SigProfiler’s expected 96-channel order
channels <- SigProfilerAssignmentR::GetSBS96()
mat_ordered <- mat_t[channels, , drop = FALSE]
# 4. Return in dataframe format (MutationType + samples)
df <- as.data.frame(mat_ordered)
df <- cbind(MutationType = rownames(df), df)
rownames(df) <- NULL
return(df)
}
no_exposure_test
convert_sigfit_to_SigProfiler(no_exposure_test)
convert_sigfit_to_SigProfiler <- function(sigfit_matrix) {
# Load library (for downstream use)
library(SigProfilerAssignmentR)
# 1. Transpose so rows = mutation types, cols = samples
mat_t <- t(sigfit_matrix)
# 2. Convert mutation labels from "ACA>AAA" → "A[C>A]A"
convert_label <- function(x) {
ref <- substr(x, 2, 2)       # central base
alt <- substr(x, 6, 6)       # mutated base
left <- substr(x, 1, 1)      # left context
right <- substr(x, 3, 3)     # right context
paste0(left, "[", ref, ">", alt, "]", right)
}
rownames(mat_t) <- sapply(rownames(mat_t), convert_label)
# 3. Ready-made standard SBS96 order
sbs96_channels <- c(
"A[C>A]A","A[C>A]C","A[C>A]G","A[C>A]T",
"A[C>G]A","A[C>G]C","A[C>G]G","A[C>G]T",
"A[C>T]A","A[C>T]C","A[C>T]G","A[C>T]T",
"A[T>A]A","A[T>A]C","A[T>A]G","A[T>A]T",
"A[T>C]A","A[T>C]C","A[T>C]G","A[T>C]T",
"A[T>G]A","A[T>G]C","A[T>G]G","A[T>G]T",
"C[C>A]A","C[C>A]C","C[C>A]G","C[C>A]T",
"C[C>G]A","C[C>G]C","C[C>G]G","C[C>G]T",
"C[C>T]A","C[C>T]C","C[C>T]G","C[C>T]T",
"C[T>A]A","C[T>A]C","C[T>A]G","C[T>A]T",
"C[T>C]A","C[T>C]C","C[T>C]G","C[T>C]T",
"C[T>G]A","C[T>G]C","C[T>G]G","C[T>G]T",
"G[C>A]A","G[C>A]C","G[C>A]G","G[C>A]T",
"G[C>G]A","G[C>G]C","G[C>G]G","G[C>G]T",
"G[C>T]A","G[C>T]C","G[C>T]G","G[C>T]T",
"G[T>A]A","G[T>A]C","G[T>A]G","G[T>A]T",
"G[T>C]A","G[T>C]C","G[T>C]G","G[T>C]T",
"G[T>G]A","G[T>G]C","G[T>G]G","G[T>G]T",
"T[C>A]A","T[C>A]C","T[C>A]G","T[C>A]T",
"T[C>G]A","T[C>G]C","T[C>G]G","T[C>G]T",
"T[C>T]A","T[C>T]C","T[C>T]G","T[C>T]T",
"T[T>A]A","T[T>A]C","T[T>A]G","T[T>A]T",
"T[T>C]A","T[T>C]C","T[T>C]G","T[T>C]T",
"T[T>G]A","T[T>G]C","T[T>G]G","T[T>G]T"
)
# 4. Reorder rows to match SigProfiler SBS96 order
mat_ordered <- mat_t[sbs96_channels, , drop = FALSE]
# 5. Return as dataframe with MutationType column
df <- as.data.frame(mat_ordered)
df <- cbind(MutationType = rownames(df), df)
rownames(df) <- NULL
return(df)
}
no_exposure_test
convert_sigfit_to_SigProfiler(no_exposure_test)
o
sp_input <- convert_sigfit_to_SigProfiler(no_exposure_test)
Assignment <- cosmic_fit(
samples = sp_input,       # can also use "SigProfilerAssignment_input.txt"
output = "AssignmentResults",
input_type = "matrix",    # since we passed a data frame / matrix
context_type = "96",      # SBS96
collapse_to_SBS96 = TRUE, # ensures 96-channel fitting
cosmic_version = 3.3,     # latest COSMIC v3
genome_build = "GRCh38"   # or "GRCh37" depending on your data
)
py_config()
use_python("C:/Users/sfhar/AppData/Local/Programs/Python/Python313/python.exe", required = TRUE)
results_uncorr <- readRDS("amsd_results_uncorr.RDS")
results_final <- readRDS("amsd_results_corrected.RDS")
results_uncorr
results_final
library(tidyverse)
library(mutspecdist)
library(sigfit)
library(ggrepel)
files <- list.files("colo_spectrum", full.names = TRUE)
# --- COLO tables ---
colo_files <- files[grepl("COLO829TB", files) & !grepl("DBS78", files)]
colo_tables <- colo_files %>%
set_names(basename(.)) %>%
map(~ read_tsv(.x, show_col_types = FALSE))
# Rename each value column to the filename
colo_tables <- imap(colo_tables, ~ rename(.x, !!.y := 2))
# Merge all by MutationType
COLO829TB_merged <- reduce(colo_tables, full_join, by = "MutationType")
# --- Kmer tables ---
kmer_files <- files[grepl("kmer", files)]
kmer_tables <- kmer_files %>%
set_names(basename(.)) %>%
map(~ read_tsv(.x, show_col_types = FALSE))
# Merge by "3mer"
kmer_merged <- reduce(kmer_tables, full_join, by = "3mer")
COLO829TB_merged
kmer_merged
COLO829TB_ordered <- COLO829TB_merged %>%
separate(MutationType, into = c("a","b"), sep = "\\[", remove = FALSE) %>%
separate(b, into = c("b","c"), sep = "\\]") %>%
arrange(b,a,c) %>%
select(-a,-b,-c) %>%
column_to_rownames(var = "MutationType") %>%
t() %>%
as.data.frame()
COLO829TB_ordered
rowSums(COLO829TB_ordered )
sum(rowSums(COLO829TB_ordered))
sum(rowSums(COLO829TB_ordered)[2:10])
rownames(COLO829TB_ordered)
names(kmer_merged)
sample_counts <- COLO829TB_ordered
sample_counts
kmer_C <- kmer_merged %>%
filter(str_sub(`3mer`, 2, 2) == "C")
kmer_T <- kmer_merged %>%
filter(str_sub(`3mer`, 2, 2) == "T")
oppertunities <- rbind(kmer_C,kmer_C,kmer_C,kmer_T,kmer_T,kmer_T) %>%
select(-`3mer`) %>%
t() %>%
as.data.frame()
colnames(oppertunities) <- colnames(sample_counts )
oppertunities
plot_spectrum(sample_counts, pdf_path = "sample_counts.pdf")
plot_spectrum(oppertunities, pdf_path = "oppertunities.pdf")
partition_mutations <- function(mat, group_size = 10, min_total = 100) {
# mat: data.frame or matrix with rows = samples, cols = mutation types (SBS96)
# group_size: number of mutations per partition
# min_total: only process rows with >= this many mutations
results <- list()
for (sample_name in rownames(mat)) {
row_counts <- mat[sample_name, ]
total_mut <- sum(row_counts)
if (total_mut < min_total) {
next  # skip
}
# Expand mutations into a vector of mutation types
expanded <- rep(colnames(mat), times = row_counts)
# Shuffle randomly
expanded <- sample(expanded)
# Partition into groups of size `group_size`
n_groups <- ceiling(length(expanded) / group_size)
groups <- split(expanded, ceiling(seq_along(expanded) / group_size))
# Collapse back to SBS96 counts per group
group_counts <- map_dfr(seq_along(groups), function(i) {
tibble::as_tibble_row(table(factor(groups[[i]], levels = colnames(mat)))) %>%
mutate(Sample = sample_name,
Group = i,
n_mutations = length(groups[[i]]))
})
results[[sample_name]] <- group_counts
}
bind_rows(results)
}
partitioned <- partition_mutations(COLO829TB_ordered, group_size = 10, min_total = 100)
# Check result
dim(partitioned)        # should be ~ total_mut / 100 rows
samples_ordered <- COLO829TB_ordered %>%
rownames_to_column(var = "name") %>%
separate(name, into = c("name", NA, NA), sep = "\\.") %>%
separate(name, into = c(NA,"type"), sep = "Filtered_") %>%
filter(!is.na(type)) %>%
column_to_rownames(var = "type")
oppertunities_ordered <- select(as.data.frame(t(oppertunities)), rownames(samples_ordered)) %>%
t() %>%
as.data.frame()
rowSums(samples_ordered)
samples_ordered
corrected <- samples_ordered/oppertunities_ordered
corrected_spectra <- corrected/rowSums(corrected)*rowSums(samples_ordered)
corrected_spectra_rounded <- round(corrected_spectra)
corrected_spectra_rounded
oppertunities_ordered
oppertunities
oppertunities_ordered
oppertunities[rep("count", nrow(oppertunities_ordered)),]
full_genome_oppertunities <- oppertunities[rep("count", nrow(oppertunities_ordered)),]
corrected <- samples_ordered/oppertunities_ordered
corrected_spectra <- samples_ordered*full_genome_oppertunities/oppertunities_ordered
corrected_spectra_rounded <- round(corrected_spectra)
rowSums(samples_ordered)
rowSums(corrected_spectra_rounded)
rowSums(full_genome_oppertunities)
rowSums(oppertunities_ordered)
full_genome_oppertunities
rowSums(full_genome_oppertunities)
full_genome_oppertunities <- oppertunities[rep("count", nrow(oppertunities_ordered)),]/3
corrected <- samples_ordered/oppertunities_ordered
corrected_spectra <- samples_ordered*full_genome_oppertunities/oppertunities_ordered
corrected_spectra_rounded <- round(corrected_spectra)
# full_genome_oppertunities
# rowSums(full_genome_oppertunities)
# rowSums(oppertunities_ordered)
rowSums(samples_ordered)
rowSums(corrected_spectra_rounded)
full_genome_oppertunities
rowSums(full_genome_oppertunities)
full_genome_oppertunities
rowSums(full_genome_oppertunities)
full_genome_oppertunities <- oppertunities[rep("count", nrow(oppertunities_ordered)),]
corrected <- samples_ordered/oppertunities_ordered
corrected_spectra <- samples_ordered*full_genome_oppertunities/oppertunities_ordered
corrected_spectra_rounded <- round(corrected_spectra)
full_genome_oppertunities
rowSums(full_genome_oppertunities)
# rowSums(oppertunities_ordered)
rowSums(samples_ordered)
rowSums(corrected_spectra_rounded)
full_genome_oppertunities
rowSums(full_genome_oppertunities)
rowSums(samples_ordered)
rowSums(corrected_spectra_rounded)
full_genome_oppertunities
rowSums(full_genome_oppertunities)
# rowSums(oppertunities_ordered)
rowSums(samples_ordered)
rowSums(corrected_spectra_rounded)
# other way to correct - convert to full genome
full_genome_oppertunities <- oppertunities[rep("count", nrow(oppertunities_ordered)),]
full_genome_oppertunities
rowSums(full_genome_oppertunities)
full_genome_oppertunities
rowSums(oppertunities)
full_genome_oppertunities <- oppertunities[rep("count", nrow(oppertunities_ordered)),]
corrected_spectra <- corrected/rowSums(corrected)*rowSums(samples_ordered)
corrected_spectra_rounded <- round(corrected_spectra)
rowSums(samples_ordered)
rowSums(corrected_spectra_rounded)
partitioned_corrected <- partition_mutations(corrected_spectra_rounded, group_size = 10, min_total = 100)
# Check result
partitioned_corrected
results_sigprof <- readRDS(file = "top_results_simulations_sigprofiler.rds")
##########################
#after running
getwd()
setwd("..")
setwd("..")
getwd()
setwd("AMSD_cancer_mutation_spectra/scripts")
results_sigprof <- readRDS(file = "top_results_simulations_sigprofiler.rds")
results_sigprof
output2 <- results_sigprof %>%
group_by(n_samples, n_mutations, additional_sig, frac_extra) %>%
summarize(mean_p = mean(as.numeric(amsd_p)),
sd_p = sd(as.numeric(amsd_p)),
success_frac = sum(amsd_p <= 0.05)/n(),
mean_p_sig = mean(as.numeric(amsd_p)),
sd_p_sig = sd(as.numeric(amsd_p)),
success_frac_sig = sum(amsd_p <= 0.05)/n())
output2
output2 <- results_sigprof %>%
group_by(n_samples, n_mutations, additional_sig, frac_extra) %>%
summarize(success_amsd = sum(amsd_p <= 0.05)/n(),
success_ttest = sum(p_ttest <= 0.05)/n(),
success_wilcox = sum(p_wilcox <= 0.05)/n(),
success_ttestBonf = sum(p_ttest_Bonf <= 0.05)/n(),
success_wilcoxBonf = sum(p_wilcox_Bonf <= 0.05)/n(),
success_ttestBH = sum(p_ttest_BH <= 0.05)/n(),
success_wilcoxBH = sum(p_wilcox_BH <= 0.05)/n())
output2
simulation_plot <- output2 %>%
ggplot(aes(x = factor(n_samples, levels = c("5","25","125","625")),
y = success_amsd,
color = factor(extra_muts, levels = c("0.02","0.05","0.1","0.2")),
group = factor(extra_muts, levels = c("0.02","0.05","0.1","0.2"))))+
geom_point()+
geom_line() +
facet_grid(n_mutations ~ exposure) +
guides(color = guide_legend(title = "Extra mutations per \nexposure sample (%)"))+
xlab("Sample count (same # exposed and non-exposed)")+
ylab("Difference detected \n(p<0.05, fraction of 100 simulations)")+
# ggtitle("AMSD strength of detection in \nWES (50 mu/sample) and WGS (2500 mu/sample)")+
theme_classic()
simulation_plot
simulation_plot <- output2 %>%
ggplot(aes(x = factor(n_samples, levels = c("5","25","125","625")),
y = success_amsd,
color = factor(frac_extra, levels = c("0.02","0.05","0.1","0.2")),
group = factor(frac_extra, levels = c("0.02","0.05","0.1","0.2"))))+
geom_point()+
geom_line() +
facet_grid(n_mutations ~ additional_sig) +
guides(color = guide_legend(title = "Extra mutations per \nexposure sample (%)"))+
xlab("Sample count (same # exposed and non-exposed)")+
ylab("Difference detected \n(p<0.05, fraction of 100 simulations)")+
# ggtitle("AMSD strength of detection in \nWES (50 mu/sample) and WGS (2500 mu/sample)")+
theme_classic()
simulation_plot
simulation_plot <- function(input, test, title){
ggplot(input,
aes(x = factor(n_samples, levels = c("5","25","125","625")),
y = get(test),
color = factor(frac_extra, levels = c("0.02","0.05","0.1","0.2")),
group = factor(frac_extra, levels = c("0.02","0.05","0.1","0.2"))))+
geom_point()+
geom_line() +
facet_grid(n_mutations ~ additional_sig) +
guides(color = guide_legend(title = "Extra mutations per \nexposure sample (%)"))+
xlab("Sample count (same # exposed and non-exposed)")+
ylab("Difference detected \n(p<0.05, fraction of 100 simulations)")+
ggtitle("title")+
theme_classic()
}
simulation_plot(output2, "success_amsd", "Test")
ggplot(input,
aes(x = factor(n_samples, levels = c("5","25","125","625")),
y = get(test),
color = factor(frac_extra, levels = c("0.02","0.05","0.1","0.2")),
group = factor(frac_extra, levels = c("0.02","0.05","0.1","0.2"))))+
geom_point()+
geom_line() +
facet_grid(n_mutations ~ additional_sig) +
guides(color = guide_legend(title = "Extra mutations per \nexposure sample (%)"))+
xlab("Sample count (same # exposed and non-exposed)")+
ylab("Difference detected \n(p<0.05, fraction of 100 simulations)")+
ggtitle(title)+
theme_classic()
simulation_plot <- function(input, test, title){
ggplot(input,
aes(x = factor(n_samples, levels = c("5","25","125","625")),
y = get(test),
color = factor(frac_extra, levels = c("0.02","0.05","0.1","0.2")),
group = factor(frac_extra, levels = c("0.02","0.05","0.1","0.2"))))+
geom_point()+
geom_line() +
facet_grid(n_mutations ~ additional_sig) +
guides(color = guide_legend(title = "Extra mutations per \nexposure sample (%)"))+
xlab("Sample count (same # exposed and non-exposed)")+
ylab("Difference detected \n(p<0.05, fraction of 100 simulations)")+
ggtitle(title)+
theme_classic()
}
simulation_plot(output2, "success_amsd", "Test")
simulation_plot(output2, "success_amsd", "Testing method: AMSD")
simulation_plot(output2, "success_ttest", "Testing method: ttest")
simulation_plot(output2, "success_wilcox", "Testing method: wilcox")
simulation_plot(output2, "success_ttestBonf", "Testing method: ttest Bonf-corrected")
simulation_plot(output2, "success_wilcoxBonf", "Testing method: wilcox Bonf-corrected")
simulation_plot(output2, "success_ttestBH", "Testing method: ttest BH-corrected")
simulation_plot(output2, "success_amsd", "Testing method: AMSD")
simulation_plot(output2, "success_ttest", "Testing method: ttest")
simulation_plot(output2, "success_wilcox", "Testing method: wilcox")
simulation_plot(output2, "success_ttestBonf", "Testing method: ttest Bonf-corrected")
simulation_plot(output2, "success_wilcoxBonf", "Testing method: wilcox Bonf-corrected")
simulation_plot(output2, "success_ttestBH", "Testing method: ttest BH-corrected")
simulation_plot(output2, "success_wilcoxBonf", "Testing method: wilcox BH-corrected")
partitioned_final
partitioned <- partition_mutations(COLO829TB_ordered, group_size = 10, min_total = 100)
# Check result
dim(partitioned)        # should be ~ total_mut / 100 rows
partitioned
partitioned_final <- partitioned %>%
separate(Sample, into = c("name", NA, NA), sep = "\\.") %>%
separate(name, into = c(NA,"type"), sep = "Filtered_") %>%
filter(!is.na(type))
partitioned_final
unique(partitioned_final$type)
sims= 100000
###################################################
pvalues <- c()
cosines <- c()
repeat1s <- c()
for(repeat1 in unique(partitioned_corrected$Sample)){
print(paste("starting", repeat1))
set1 <- filter(partitioned_corrected,
Sample == repeat1) %>%
filter(n_mutations > 1) %>%
select(-Sample,-Group, -n_mutations)
set2 <- partitioned_corrected %>%
filter(n_mutations > 1) %>%
select(-Sample,-Group, -n_mutations)
amsd_output <- amsd(set1, set2, mean_or_sum = "sum", seed = 1234, n_sim = sims)
pvalues <- c(pvalues, amsd_output$p)
cosines <- c(cosines, amsd_output$cosine)
repeat1s <- c(repeat1s, repeat1)
}
results_corr <- data.frame(pvalue_corr = pvalues,
cosine_dist_corr = cosines,
rep1 = repeat1s)
results_corr
###################################################
pvalues <- c()
cosines <- c()
repeat1s <- c()
for(repeat1 in unique(partitioned_final$type)){
print(paste("starting", repeat1))
set1 <- filter(partitioned_final,
type == repeat1) %>%
filter(n_mutations > 1) %>%
select(-type,-Group, -n_mutations)
set2 <- filter(partitioned_final,
type == "None_RE") %>%
filter(n_mutations > 1) %>%
select(-type,-Group, -n_mutations)
amsd_output <- amsd(set1, set2, mean_or_sum = "sum", seed = 1234, n_sim = sims)
pvalues <- c(pvalues, amsd_output$p)
cosines <- c(cosines, amsd_output$cosine)
repeat1s <- c(repeat1s, repeat1)
}
getwd()
saveRDS(results_corr, file = "amsd_results_corrected2_100000.RDS")
